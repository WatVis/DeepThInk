{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/mnt/427bdd3d-17db-4d44-b722-f3e4fd35d808/projects/gauGAN/hai-art/client-expo/components/DrawCanvas.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Canvas, { Image as CanvasImage } from 'react-native-canvas';\nimport { generateStyle } from \"../styles/styles\";\nimport Point from \"../classes/Point\";\nvar device = Dimensions.get('window');\nvar styles = StyleSheet.create(generateStyle(device));\n\nvar DrawCanvas = function (_Component) {\n  _inherits(DrawCanvas, _Component);\n\n  var _super = _createSuper(DrawCanvas);\n\n  function DrawCanvas(props) {\n    var _this;\n\n    _classCallCheck(this, DrawCanvas);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      strokes: []\n    };\n\n    _this.onDrawMove = function (event) {\n      var posX = event.nativeEvent.locationX;\n      var posY = event.nativeEvent.locationY;\n      var p = new Point(posX, posY, _this.props.thickness, \"move\");\n\n      _this.updateCanvas(p);\n\n      _this.setState({\n        strokes: _this.state.strokes.concat(p)\n      });\n    };\n\n    _this.onDrawStart = function (event) {\n      console.log(\"Got start\");\n      var posX = event.nativeEvent.locationX;\n      var posY = event.nativeEvent.locationY;\n      var p = new Point(posX, posY, _this.props.thickness, \"start\");\n\n      _this.updateCanvas(p);\n\n      _this.setState({\n        strokes: _this.state.strokes.concat(p)\n      });\n    };\n\n    _this.onDrawEnd = function (event) {\n      var posX = event.nativeEvent.locationX;\n      var posY = event.nativeEvent.locationY;\n      var p = new Point(posX, posY, _this.props.thickness, \"end\");\n\n      _this.updateCanvas(p);\n\n      _this.setState({\n        strokes: _this.state.strokes.concat(p)\n      });\n    };\n\n    _this.updateCanvas = function (point) {\n      if (!_this.canvasRef) {\n        return;\n      }\n\n      var canvas = _this.canvasRef.current;\n      var len = _this.state.strokes.length;\n      console.log(\"canvas is\", canvas == null);\n\n      if (canvas && len > 0) {\n        var lastPoint = _this.state.strokes[len - 1];\n        var secondLastPoint = _this.state.strokes[len - 2];\n        var x = point.x,\n            y = point.y,\n            type = point.type,\n            thickness = point.thickness;\n        console.log(\"thickness is\", thickness);\n        var ctx = canvas.getContext(\"2d\");\n        ctx.lineWidth = thickness;\n\n        switch (type) {\n          case \"start\":\n            ctx.moveTo(x, y);\n            ctx.beginPath();\n            ctx.lineTo(x, y);\n            break;\n\n          case \"end\":\n            break;\n\n          case \"move\":\n            ctx.beginPath();\n            ctx.moveTo(lastPoint.x, lastPoint.y);\n            ctx.globalCompositeOperation = 'source-over';\n            ctx.lineTo(x, y);\n            break;\n        }\n\n        ctx.fillStyle = 'black';\n        ctx.strokeStyle = 'black';\n        ctx.lineJoin = ctx.lineCap = 'round';\n        ctx.closePath();\n        ctx.stroke();\n      }\n    };\n\n    _this.handleCanvas = function (canvas) {\n      console.log(\"handling canvas\", canvas);\n      var ctx = canvas.getContext('2d');\n      canvas.width = styles.drawBox.width;\n      canvas.height = styles.drawBox.height;\n      _this.canvasRef = canvas;\n      _this.canvasRef.current = canvas;\n    };\n\n    _this.handleCanvas = _this.handleCanvas.bind(_assertThisInitialized(_this));\n    _this.thickness = props.thickness;\n    _this.canvasRef = null;\n    return _this;\n  }\n\n  _createClass(DrawCanvas, [{\n    key: \"render\",\n    value: function render() {\n      console.log(\"platform is\", Platform.OS);\n\n      if (Platform.OS === \"web\") {\n        return React.createElement(View, {\n          style: styles.drawBox,\n          onTouchMove: this.onDrawMove,\n          onTouchStart: this.onDrawStart,\n          onTouchEnd: this.onDrawEnd,\n          onMouseDown: this.onDrawStart,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 3\n          }\n        }, React.createElement(\"canvas\", {\n          style: {\n            \"borderWidth\": 20,\n            \"border\": \"black\"\n          },\n          width: styles.drawBox.width,\n          height: styles.drawBox.height,\n          ref: this.handleCanvas,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 9\n          }\n        }));\n      }\n\n      return React.createElement(View, {\n        onTouchMove: this.onDrawMove,\n        onTouchStart: this.onDrawStart,\n        onTouchEnd: this.onDrawEnd,\n        style: styles.drawBox,\n        onMouseDown: this.onDrawStart,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 3\n        }\n      }, React.createElement(Canvas, {\n        style: {\n          \"borderWidth\": 20\n        },\n        width: styles.drawBox.width,\n        height: styles.drawBox.height,\n        ref: this.handleCanvas,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return DrawCanvas;\n}(Component);\n\nexport { DrawCanvas as default };","map":{"version":3,"sources":["/mnt/427bdd3d-17db-4d44-b722-f3e4fd35d808/projects/gauGAN/hai-art/client-expo/components/DrawCanvas.js"],"names":["React","Component","useRef","Canvas","Image","CanvasImage","generateStyle","Point","device","Dimensions","get","styles","StyleSheet","create","DrawCanvas","props","state","strokes","onDrawMove","event","posX","nativeEvent","locationX","posY","locationY","p","thickness","updateCanvas","setState","concat","onDrawStart","console","log","onDrawEnd","point","canvasRef","canvas","current","len","length","lastPoint","secondLastPoint","x","y","type","ctx","getContext","lineWidth","moveTo","beginPath","lineTo","globalCompositeOperation","fillStyle","strokeStyle","lineJoin","lineCap","closePath","stroke","handleCanvas","width","drawBox","height","bind","Platform","OS"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;;;;;;AAEA,OAAOC,MAAP,IAAgBC,KAAK,IAAIC,WAAzB,QAA2C,qBAA3C;AACA,SAASC,aAAT;AACA,OAAOC,KAAP;AAEA,IAAIC,MAAM,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAb;AAGA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkBP,aAAa,CAACE,MAAD,CAA/B,CAAf;;IAEqBM,U;;;;;AAMpB,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,8BAAMA,KAAN;AADkB,UAHnBC,KAGmB,GAHX;AACPC,MAAAA,OAAO,EAAE;AADF,KAGW;;AAAA,UAQhBC,UARgB,GAQH,UAACC,KAAD,EAAW;AAG1B,UAAIC,IAAI,GAAGD,KAAK,CAACE,WAAN,CAAkBC,SAA7B;AACA,UAAIC,IAAI,GAAGJ,KAAK,CAACE,WAAN,CAAkBG,SAA7B;AAEA,UAAIC,CAAC,GAAG,IAAIlB,KAAJ,CAAUa,IAAV,EAAgBG,IAAhB,EAAsB,MAAKR,KAAL,CAAWW,SAAjC,EAA4C,MAA5C,CAAR;;AACA,YAAKC,YAAL,CAAkBF,CAAlB;;AAGA,YAAKG,QAAL,CAAc;AACbX,QAAAA,OAAO,EAAE,MAAKD,KAAL,CAAWC,OAAX,CAAmBY,MAAnB,CAA0BJ,CAA1B;AADI,OAAd;AAKG,KAvBe;;AAAA,UAyBnBK,WAzBmB,GAyBL,UAACX,KAAD,EAAW;AACxBY,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAIZ,IAAI,GAAGD,KAAK,CAACE,WAAN,CAAkBC,SAA7B;AACA,UAAIC,IAAI,GAAGJ,KAAK,CAACE,WAAN,CAAkBG,SAA7B;AAGA,UAAIC,CAAC,GAAG,IAAIlB,KAAJ,CAAUa,IAAV,EAAgBG,IAAhB,EAAsB,MAAKR,KAAL,CAAWW,SAAjC,EAA4C,OAA5C,CAAR;;AACA,YAAKC,YAAL,CAAkBF,CAAlB;;AAEA,YAAKG,QAAL,CAAc;AACbX,QAAAA,OAAO,EAAE,MAAKD,KAAL,CAAWC,OAAX,CAAmBY,MAAnB,CAA0BJ,CAA1B;AADI,OAAd;AAIA,KAtCkB;;AAAA,UAwCnBQ,SAxCmB,GAwCP,UAACd,KAAD,EAAW;AACtB,UAAIC,IAAI,GAAGD,KAAK,CAACE,WAAN,CAAkBC,SAA7B;AACA,UAAIC,IAAI,GAAGJ,KAAK,CAACE,WAAN,CAAkBG,SAA7B;AAGA,UAAIC,CAAC,GAAG,IAAIlB,KAAJ,CAAUa,IAAV,EAAgBG,IAAhB,EAAsB,MAAKR,KAAL,CAAWW,SAAjC,EAA4C,KAA5C,CAAR;;AACA,YAAKC,YAAL,CAAkBF,CAAlB;;AAEA,YAAKG,QAAL,CAAc;AACbX,QAAAA,OAAO,EAAE,MAAKD,KAAL,CAAWC,OAAX,CAAmBY,MAAnB,CAA0BJ,CAA1B;AADI,OAAd;AAGA,KAnDkB;;AAAA,UAqDnBE,YArDmB,GAqDJ,UAACO,KAAD,EAAW;AAEzB,UAAI,CAAC,MAAKC,SAAV,EAAqB;AACpB;AACA;;AACD,UAAIC,MAAM,GAAG,MAAKD,SAAL,CAAeE,OAA5B;AACA,UAAIC,GAAG,GAAG,MAAKtB,KAAL,CAAWC,OAAX,CAAmBsB,MAA7B;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBI,MAAM,IAAI,IAAnC;;AAEA,UAAIA,MAAM,IAAIE,GAAG,GAAG,CAApB,EAAuB;AACtB,YAAIE,SAAS,GAAG,MAAKxB,KAAL,CAAWC,OAAX,CAAmBqB,GAAG,GAAC,CAAvB,CAAhB;AACA,YAAIG,eAAe,GAAG,MAAKzB,KAAL,CAAWC,OAAX,CAAmBqB,GAAG,GAAC,CAAvB,CAAtB;AACA,YAAKI,CAAL,GAA8BR,KAA9B,CAAKQ,CAAL;AAAA,YAAQC,CAAR,GAA8BT,KAA9B,CAAQS,CAAR;AAAA,YAAWC,IAAX,GAA8BV,KAA9B,CAAWU,IAAX;AAAA,YAAiBlB,SAAjB,GAA8BQ,KAA9B,CAAiBR,SAAjB;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,SAA5B;AACA,YAAImB,GAAG,GAAGT,MAAM,CAACU,UAAP,CAAkB,IAAlB,CAAV;AACAD,QAAAA,GAAG,CAACE,SAAJ,GAAgBrB,SAAhB;;AAEA,gBAAQkB,IAAR;AACC,eAAK,OAAL;AACCC,YAAAA,GAAG,CAACG,MAAJ,CAAWN,CAAX,EAAcC,CAAd;AACAE,YAAAA,GAAG,CAACI,SAAJ;AACAJ,YAAAA,GAAG,CAACK,MAAJ,CAAWR,CAAX,EAAcC,CAAd;AAEA;;AACD,eAAK,KAAL;AACC;;AACD,eAAK,MAAL;AACCE,YAAAA,GAAG,CAACI,SAAJ;AAEAJ,YAAAA,GAAG,CAACG,MAAJ,CAAWR,SAAS,CAACE,CAArB,EAAwBF,SAAS,CAACG,CAAlC;AACAE,YAAAA,GAAG,CAACM,wBAAJ,GAA+B,aAA/B;AACAN,YAAAA,GAAG,CAACK,MAAJ,CAAWR,CAAX,EAAcC,CAAd;AACA;AAfF;;AAmBAE,QAAAA,GAAG,CAACO,SAAJ,GAAgB,OAAhB;AACAP,QAAAA,GAAG,CAACQ,WAAJ,GAAkB,OAAlB;AACAR,QAAAA,GAAG,CAACS,QAAJ,GAAeT,GAAG,CAACU,OAAJ,GAAc,OAA7B;AACAV,QAAAA,GAAG,CAACW,SAAJ;AACAX,QAAAA,GAAG,CAACY,MAAJ;AAEA;AAED,KAjGkB;;AAAA,UAmGnBC,YAnGmB,GAmGJ,UAACtB,MAAD,EAAY;AAC1BL,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BI,MAA/B;AAEA,UAAMS,GAAG,GAAGT,MAAM,CAACU,UAAP,CAAkB,IAAlB,CAAZ;AACAV,MAAAA,MAAM,CAACuB,KAAP,GAAehD,MAAM,CAACiD,OAAP,CAAeD,KAA9B;AACAvB,MAAAA,MAAM,CAACyB,MAAP,GAAgBlD,MAAM,CAACiD,OAAP,CAAeC,MAA/B;AAEA,YAAK1B,SAAL,GAAiBC,MAAjB;AACA,YAAKD,SAAL,CAAeE,OAAf,GAAyBD,MAAzB;AAEA,KA7GkB;;AAElB,UAAKsB,YAAL,GAAoB,MAAKA,YAAL,CAAkBI,IAAlB,+BAApB;AACA,UAAKpC,SAAL,GAAiBX,KAAK,CAACW,SAAvB;AACA,UAAKS,SAAL,GAAiB,IAAjB;AAJkB;AAMhB;;;;WAyGA,kBAAS;AACXJ,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B+B,QAAQ,CAACC,EAApC;;AACI,UAAID,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AAC/B,eACA,oBAAC,IAAD;AACA,UAAA,KAAK,EAAGrD,MAAM,CAACiD,OADf;AAEA,UAAA,WAAW,EAAE,KAAK1C,UAFlB;AAGA,UAAA,YAAY,EAAE,KAAKY,WAHnB;AAIA,UAAA,UAAU,EAAE,KAAKG,SAJjB;AAKA,UAAA,WAAW,EAAE,KAAKH,WALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WASM;AAAQ,UAAA,KAAK,EAAE;AAAC,2BAAe,EAAhB;AAAoB,sBAAS;AAA7B,WAAf;AAAsD,UAAA,KAAK,EAAEnB,MAAM,CAACiD,OAAP,CAAeD,KAA5E;AAAmF,UAAA,MAAM,EAAEhD,MAAM,CAACiD,OAAP,CAAeC,MAA1G;AAAkH,UAAA,GAAG,EAAE,KAAKH,YAA5H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATN,CADA;AAYA;;AAEE,aACF,oBAAC,IAAD;AACA,QAAA,WAAW,EAAE,KAAKxC,UADlB;AAEA,QAAA,YAAY,EAAE,KAAKY,WAFnB;AAGA,QAAA,UAAU,EAAE,KAAKG,SAHjB;AAIA,QAAA,KAAK,EAAGtB,MAAM,CAACiD,OAJf;AAKA,QAAA,WAAW,EAAE,KAAK9B,WALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOM,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE;AAAC,yBAAe;AAAhB,SAAf;AAAmC,QAAA,KAAK,EAAEnB,MAAM,CAACiD,OAAP,CAAeD,KAAzD;AAAgE,QAAA,MAAM,EAAEhD,MAAM,CAACiD,OAAP,CAAeC,MAAvF;AAA+F,QAAA,GAAG,EAAE,KAAKH,YAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPN,CADE;AAWC;;;;EAjJmCzD,S;;SAAnBa,U","sourcesContent":["import React, { Component, useRef } from 'react';\nimport {Text, View, Platform, StyleSheet, Dimensions} from 'react-native';\nimport Canvas, {Image as CanvasImage} from 'react-native-canvas';\nimport { generateStyle } from '../styles/styles';\nimport Point from \"../classes/Point\";\n\nvar device = Dimensions.get('window');\n\n\nconst styles = StyleSheet.create(generateStyle(device));\n\nexport default class DrawCanvas extends Component {\n\n\n\tstate = {\n\t\tstrokes: []\n\t}\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleCanvas = this.handleCanvas.bind(this);\n\t\tthis.thickness = props.thickness\n\t\tthis.canvasRef = null;\n\n\t  }\n\t\n    onDrawMove = (event) => {\n\t\t// console.log(event.nativeEvent)\n        // console.log(\"hello\");\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\tvar p = new Point(posX, posY, this.props.thickness, \"move\")\n\t\tthis.updateCanvas(p)\n\n\t\t// Create stroke move object\n\t\tthis.setState({\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t})\n\n\t\t\n    }\n\n\tonDrawStart = (event) => {\n\t\tconsole.log(\"Got start\")\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\t// Create stroke move object\n\t\tvar p = new Point(posX, posY, this.props.thickness, \"start\")\n\t\tthis.updateCanvas(p)\n\n\t\tthis.setState({\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t} )\n\n\t}\n\n\tonDrawEnd = (event) => {\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\t// Create stroke move object\n\t\tvar p = new Point(posX, posY, this.props.thickness, \"end\")\n\t\tthis.updateCanvas(p)\n\n\t\tthis.setState({\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t} )\n\t}\n\n\tupdateCanvas = (point) => {\n\t// draw a point\n\t\tif (!this.canvasRef) {\n\t\t\treturn;\n\t\t}\n\t\tvar canvas = this.canvasRef.current\n\t\tvar len = this.state.strokes.length\n\t\tconsole.log(\"canvas is\", canvas == null)\n\n\t\tif (canvas && len > 0) {\n\t\t\tvar lastPoint = this.state.strokes[len-1]\n\t\t\tvar secondLastPoint = this.state.strokes[len-2]\n\t\t\tvar {x, y, type, thickness} = point\n\t\t\tconsole.log(\"thickness is\", thickness)\n\t\t\tvar ctx = canvas.getContext(\"2d\");\n\t\t\tctx.lineWidth = thickness\n\n\t\t\tswitch (type) {\n\t\t\t\tcase \"start\":\n\t\t\t\t\tctx.moveTo(x, y)\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.lineTo(x, y);\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"end\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"move\":\n\t\t\t\t\tctx.beginPath();\n\n\t\t\t\t\tctx.moveTo(lastPoint.x, lastPoint.y)\n\t\t\t\t\tctx.globalCompositeOperation = 'source-over';\n\t\t\t\t\tctx.lineTo(x, y);\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tctx.fillStyle = 'black';\n\t\t\tctx.strokeStyle = 'black';\n\t\t\tctx.lineJoin = ctx.lineCap = 'round';\n\t\t\tctx.closePath()\n\t\t\tctx.stroke();\t\t\t\n\n\t\t}\n\n\t}\n\n\thandleCanvas = (canvas) => {\n\t\tconsole.log(\"handling canvas\", canvas)\n\n\t\tconst ctx = canvas.getContext('2d');\n\t\tcanvas.width = styles.drawBox.width;\n\t\tcanvas.height = styles.drawBox.height;\n\n\t\tthis.canvasRef = canvas;\n\t\tthis.canvasRef.current = canvas;\n\n\t}\n   \n    render() {\n\t\tconsole.log(\"platform is\", Platform.OS)\n      if (Platform.OS === \"web\") {\n\t\treturn (\n\t\t<View\n\t\tstyle= {styles.drawBox}\n\t\tonTouchMove={this.onDrawMove}\n\t\tonTouchStart={this.onDrawStart}\n\t\tonTouchEnd={this.onDrawEnd}\n\t\tonMouseDown={this.onDrawStart}\n\t\t>\n\t\n\n        <canvas style={{\"borderWidth\": 20, \"border\":\"black\"}} width={styles.drawBox.width} height={styles.drawBox.height} ref={this.handleCanvas} />\n\t\t</View>)\n\t}\n    \n    return (\n\t\t<View\n\t\tonTouchMove={this.onDrawMove}\n\t\tonTouchStart={this.onDrawStart}\n\t\tonTouchEnd={this.onDrawEnd}\n\t\tstyle= {styles.drawBox}\n\t\tonMouseDown={this.onDrawStart}\n\t\t>\n        <Canvas style={{\"borderWidth\": 20}}width={styles.drawBox.width} height={styles.drawBox.height} ref={this.handleCanvas} />\n\t\t</View>\n    )\n    }\n   \n    \n  }\n\n"]},"metadata":{},"sourceType":"module"}