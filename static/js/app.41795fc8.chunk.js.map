{"version":3,"sources":["resources/bushLogo.png","resources/AIBrush.png","resources/none_style.png","resources/seaLogo.png","resources/cloudLogo.png","resources/dirtLogo.png","resources/mountainLogo.png","resources/skyLogo.png","resources/treeLogo.png","resources/hillLogo.png","resources/riverLogo.png","resources/kanagawa.jpg","resources/starry_night.jpg","resources/rain_princess.jpg","resources/candy.jpg","resources/mosaic.jpg","resources/udnie.jpg","resources/brushes/Eraser.png","resources/brushes/Marker.png","resources/brushes/Highlighter.png","resources/brushes/Splotch.png","resources/brushes/Crayon.png","resources/brushes/Charcoal.png","resources/brushes/Ballpoint.png","resources/brushes/Chalk.png","resources/filters/blur.png","resources/filters/sepia.png","resources/filters/grey.png","resources/filters/contrast.png","resources/filters/fade.png","resources/filters/invert.png","resources/styleBrush.png","resources/filterBrush.png","resources/userBrush.png","styles/styles.js","classes/Point.js","constants/messageKinds.js","constants/brushTypes.js","components/DrawCanvas.js","constants/backendUrl.js","constants/userBrushes.js","components/UserCanvas.js","components/InspireMode.js","constants/colorMap.js","constants/styleTransferOptions.js","constants/userBrushesOptions.js","constants/filterBrushOptions.js","App.js","index.js"],"names":["module","exports","generateStyle","device","drawBox","borderColor","borderWidth","position","top","left","drawBoxInner","backgroundColor","width","height","userDrag","userSelect","Point","x","y","thickness","color","type","canvasType","this","messageKinds","MESSAGE_CONNECTED","MESSAGE_USER_JOINED","MESSAGE_USER_LEFT","MESSAGE_STROKE","MESSAGE_CLEAR","MESSAGE_CLIENT_SEND_INFO","MESSAGE_STROKE_START","MESSAGE_STROKE_END","MESSAGE_GENERATE","MESSAGE_STYLIZE","MESSAGE_SAVE","MESSAGE_SWITCH_BRUSH","MESSAGE_SWITCH_FILTER","MESSAGE_SWITCH_USER_BRUSH","Dimensions","get","styles","StyleSheet","create","DrawCanvas","props","state","strokes","loadData","imageData","canvas","canvasRef","current","ctx","getContext","image","Image","src","save","drawImage","restore","onDrawMove","event","disable","brushType","brushTypes","posX","nativeEvent","locationX","posY","locationY","p","updateCanvas","setState","concat","onDrawStart","onDrawEnd","point","client","lastPoint","length","otherStrokes","len","lineWidth","moveTo","beginPath","lineTo","globalCompositeOperation","fillStyle","strokeStyle","lineJoin","lineCap","closePath","stroke","clearCanvas","fillRect","handleCanvas","getPathData","drawer","size","_size","path","data","toString","id","parseInt","Math","random","getPathDataArray","parsedArr","i","push","getBase64","a","async","ret","toDataURL","prevState","imagedata","Promise","resolve","bind","canvasOpacity","prevProps","newStroke","setClickClear","Platform","OS","View","style","opacity","onStartShouldSetResponder","onMoveShouldSetResponder","onResponderStart","onResponderMove","onResponderRelease","draggable","ref","Component","UserCanvas","imageBrush","hexToRGB","hex","alpha","r","slice","g","b","myRand","min","max","myRand2","val","range","makeBrushColor","currentComponent","console","log","fetch","backendConstants","headers","method","body","JSON","stringify","userBrushType","then","res","json","parsedJson","catch","clearRect","clearCanvasKeepState","offset","userBrushes","arc","PI","fill","includes","globalAlpha","translate","angle","atan2","rotate","onStrokeEndHandler","onStrokeStartHandler","defaultWhiteCanvas","Title","Typography","options","value","label","InspireMode","localurl","useState","prompt","setPrompt","setStyle","list","setList","useEffect","map","section","index","flexDirection","margin","level","onChange","e","olddata","one","target","two","three","marginTop","placeholder","mode","allowClear","maxWidth","marginRight","onClick","response","msg","handleGenerate","PreviewGroup","colors","logo","require","labelColor","name","image_url","filters","filter","CANVASWIDTH","CANVASHEIGHT","App","showAICanvas","showInspireMode","showUserCanvas","rightColumnWidth","rightColumnMargin","leftColumnWidth","leftColumnLeftMargin","AI_CANVASWIDTH","AI_CANVASHEIGHT","USER_CANVASWIDTH","USER_CANVASHEIGHT","aiCanvasImageData","generatedImageData","stylizedImageData","displayedImageData","finalImageData","imageFilter","userBrushColor","colorPickerDisplay","userBrushBase64","styleBrushType","filterBrushType","ownStroke","collaboratorStroke","displayColorPicker","disableDrawing","disableButtons","canvasWidth","canvasHeight","currentBrush","showPreview","isLoading","isChangeSize","isFirstLoadDrawCanvas","text","flag","grabPixelsGan","refs","drawCanvasRef","resultImage","split","sendRequestHelper","grabPixelsSd","grabPixelsCN","sendRequestStyleHelper","newStyle","saveGeneratedImage","userCanvasRef","foregroundImageDataStripped","socket","send","kind","userCanvasImageData","alert","handleThickness","sliderValue","handleThicknessEnd","handleOpacity","rgbToHex","d","hex2rgb","enableAICanvas","usercanvas","setTimeout","enableUserCanvas","aicanvas","switchToAICanvas","switchToInspireMode","switchToStyleBrush","switchToFilterBrush","switchToUserBrush","brushSlider","marginLeft","borderRadius","padding","Text","textAlign","fontWeight","fontSize","minimumValue","maximumValue","thumbTintColor","minimumTrackTintColor","maximumTrackTintColor","onValueChange","onSlidingComplete","document","documentElement","overflow","container","TouchableOpacity","onPress","disabled","brushes","source","marginBottom","display","paddingTop","alignContent","shadowBoxAICanvas","ImageBackground","drawGroup","click","clearChildAIBrush","background","generatedImageBox","generatedImage","uri","shadowBox","clearChildUserBrush","justifyContent","TextInput","onChangeText","Button","title","brushesContainer","colorMap","obj","functionButton","styleTransferOptions","filterOptions","userBrushesOptions","spinnerContainer","ActivityIndicator","animating","transform","scale","circleContainer","Ionicons","alignItems","flex","shadowColor","shadowRadius","strokeGroup","toolGroup","donwloadButton","borderLeftColor","borderLeftWidth","spinnerTextStyle","swatch","boxShadow","cursor","popover","zIndex","cover","right","bottom","Cat","registerRootComponent"],"mappings":"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","file":"static/js/app.41795fc8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bushLogo.c006aa6c.png\";","module.exports = __webpack_public_path__ + \"static/media/AIBrush.eb0b1fec.png\";","module.exports = __webpack_public_path__ + \"static/media/none_style.70a5cb7e.png\";","module.exports = __webpack_public_path__ + \"static/media/seaLogo.2178ea2a.png\";","module.exports = __webpack_public_path__ + \"static/media/cloudLogo.5b6fe413.png\";","module.exports = __webpack_public_path__ + \"static/media/dirtLogo.438a7bc6.png\";","module.exports = __webpack_public_path__ + \"static/media/mountainLogo.b051e5b2.png\";","module.exports = __webpack_public_path__ + \"static/media/skyLogo.9f0d6c2c.png\";","module.exports = __webpack_public_path__ + \"static/media/treeLogo.fcc942ee.png\";","module.exports = __webpack_public_path__ + \"static/media/hillLogo.ef3c29a3.png\";","module.exports = __webpack_public_path__ + \"static/media/riverLogo.de091209.png\";","module.exports = __webpack_public_path__ + \"static/media/kanagawa.51983c91.jpg\";","module.exports = __webpack_public_path__ + \"static/media/starry_night.b0b90aef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain_princess.1726f27b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/candy.fb7d8168.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mosaic.3cf26242.jpg\";","module.exports = __webpack_public_path__ + \"static/media/udnie.edc8dab6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Eraser.962677a5.png\";","module.exports = __webpack_public_path__ + \"static/media/Marker.baa7318e.png\";","module.exports = __webpack_public_path__ + \"static/media/Highlighter.8b1ee5a5.png\";","module.exports = __webpack_public_path__ + \"static/media/Splotch.abef5126.png\";","module.exports = __webpack_public_path__ + \"static/media/Crayon.6bcf61dc.png\";","module.exports = __webpack_public_path__ + \"static/media/Charcoal.4df64008.png\";","module.exports = __webpack_public_path__ + \"static/media/Ballpoint.6fc6ee6b.png\";","module.exports = __webpack_public_path__ + \"static/media/Chalk.7ca67c72.png\";","module.exports = __webpack_public_path__ + \"static/media/blur.f3ebcb97.png\";","module.exports = __webpack_public_path__ + \"static/media/sepia.d6640e01.png\";","module.exports = __webpack_public_path__ + \"static/media/grey.0d865fb4.png\";","module.exports = __webpack_public_path__ + \"static/media/contrast.3ca02fc7.png\";","module.exports = __webpack_public_path__ + \"static/media/fade.4d0a33d7.png\";","module.exports = __webpack_public_path__ + \"static/media/invert.9671eb87.png\";","module.exports = __webpack_public_path__ + \"static/media/styleBrush.299130c8.png\";","module.exports = __webpack_public_path__ + \"static/media/filterBrush.29a7a130.png\";","module.exports = __webpack_public_path__ + \"static/media/userBrush.e241a684.png\";","// import { autocrop } from \"jimp\";\n\nexport function generateStyle(device) {\n  return {\n    drawBox: {\n      borderColor: 'black',\n      borderWidth: 2,\n      // padding: 10,\n      position: 'absolute',\n      top: 0,\n      left: 0,\n    },\n    drawBoxInner: {\n      backgroundColor: 'transparent',\n      position:\"absolute\", left: 0, top: 0,\n      // padding: 10,\n      width: device.width * 0.33,\n      height: device.width * 0.33,\n      userDrag: 'none',\n      userSelect: 'none'\n    },\n  };\n}\n","export default class Point {\n    constructor(x, y, thickness, color, type, canvasType) {\n      this.x = x;\n      this.y = y;\n      this.thickness = thickness;\n      this.color = color;\n      this.type = type;\n      this.canvasType = canvasType;\n    }\n  }\n","const messageKinds = {\n  MESSAGE_CONNECTED: 1,\n  MESSAGE_USER_JOINED: 2,\n  MESSAGE_USER_LEFT: 3,\n  MESSAGE_STROKE: 4,\n  MESSAGE_CLEAR: 5,\n  MESSAGE_CLIENT_SEND_INFO: 6,\n  MESSAGE_STROKE_START: 7,\n  MESSAGE_STROKE_END: 8,\n  MESSAGE_GENERATE: 9,\n  MESSAGE_STYLIZE: 10,\n  MESSAGE_SAVE: 11,\n  MESSAGE_SWITCH_BRUSH: 12,\n  MESSAGE_SWITCH_FILTER: 13,\n  MESSAGE_SWITCH_USER_BRUSH: 14\n};\n\nexport default messageKinds;\n","export default {\n        AI: \"ai\",\n        INSPIRE: \"inspire\",\n        STYLE: \"style\",\n        USER: \"user\",\n        FILTER: \"filter\"\n}\n","import React, { Component, useRef } from 'react';\nimport {Text, View, Platform, StyleSheet, Dimensions} from 'react-native';\nimport Canvas, {Image as CanvasImage} from 'react-native-canvas';\nimport { generateStyle } from '../styles/styles';\nimport Point from \"../classes/Point\";\nimport {\n\tsendStroke,\n\tsendStrokeEnd,\n\tsendStrokeStart,\n  } from '../api/websocketApi.js';\nimport brushTypes from \"../constants/brushTypes.js\"\n  \nvar device = Dimensions.get('window');\n\n\nconst styles = StyleSheet.create(generateStyle(device));\n\n\n\nexport default class DrawCanvas extends Component {\n\n\n\tstate = {\n\t\tstrokes: []\n\t}\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleCanvas = this.handleCanvas.bind(this);\n\t\tthis.thickness = props.thickness\n\t\tthis.color = props.color\n\t\tthis.canvasRef = null;\n\t\tthis.width = props.width;\n\t\tthis.height = props.height;\n\t\tthis.canvasOpacity = props.canvasOpacity;\n\t\tthis.clearCanvas = this.clearCanvas.bind(this);\n\n\t\tthis.imagedata = \"\";\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.otherStrokes != this.props.otherStrokes) {\n\t\t\tif (this.props.otherStrokes.length > 0) {\n\t\t\t\tvar newStroke = this.props.otherStrokes[this.props.otherStrokes.length-1]\n\t\t\t\tif (newStroke.canvasType == brushTypes.AI)\n\t\t\t\t{\n\t\t\t\t\tthis.updateCanvas(newStroke, \"other\")\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// // If canvas size has changed\n\t\t// if (prevProps.width != this.props.width) {\n\n\t\t// \t// Get the current canvas data\n\t\t// \tthis.getBase64().then(value => {\n\t\t// \t\tvar canvas = this.canvasRef.current\n\n\n\n\t\t// \t\tcanvas.width = this.props.width;\n\t\t// \t\tcanvas.height = this.props.height;\n\t\t\n\t\t// \t\tthis.canvasRef.current = canvas;\n\t\t// \t\tthis.clearCanvas();\n\n\t\t// \t\tthis.loadData();\n\t\t// \t})\n\t\t// }\n\t\t\n\t}\n\n\tloadData = (imageData) => {\n\t\tvar canvas = this.canvasRef.current\n\n\t\tvar ctx = canvas.getContext(\"2d\");\n\t\tconst image = new Image(canvas);\n\n\t\t// console.log(this.state.imagedata)\n\n\t\timage.src = imageData;\n\t\tctx.save();\n\t\tctx.drawImage(image,0,0, this.props.width, this.props.height);\n\t\tctx.restore();\n\t}\n\t\n    onDrawMove = (event) => {\n\t\tif (this.props.disable ||  this.props.brushType !== brushTypes.AI) {\n\t\t\treturn\n\t\t}\n\t\t// console.log(event.nativeEvent)\n        // console.log(\"hello\");\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\tvar p = new Point(posX, posY, this.props.thickness, this.props.color, \"move\", \"ai\")\n\t\tthis.updateCanvas(p, \"self\")\n\n\t\t// Create stroke move object\n\t\tthis.setState({\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t})\n\t\t// sendStroke(this.props.socket, {x: posX/this.props.width, y: posY/this.props.height, canvasType: \"ai\"}, this.props.color, this.props.thickness)\n\t\t\n    }\n\n\tonDrawStart = (event) => {\n\t\tif (this.props.disable ||  this.props.brushType !== brushTypes.AI) {\n\t\t\treturn\n\t\t}\n\t\t// console.log(\"Got start event:\", event)\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\t// Create stroke move object\n\t\tvar p = new Point(posX, posY, this.props.thickness, this.props.color, \"start\", \"ai\")\n\t\tthis.updateCanvas(p, \"self\")\n\n\t\tthis.setState({\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t} )\n\t\t// socket: start stroke\n\t\t// sendStrokeStart(this.props.socket, {x: p.x/this.width, y: p.y/this.height}, p.thickness, p.color);\n\n\t}\n\n\tonDrawEnd = (event) => {\n\t\tif (this.props.disable || this.props.brushType !== brushTypes.AI) {\n\t\t\treturn\n\t\t}\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\t// Create stroke move object\n\t\tvar p = new Point(posX, posY, this.props.thickness, this.props.color,  \"end\", \"ai\")\n\t\tthis.updateCanvas(p, \"self\")\n\n\t\tthis.setState({\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t})\n\t\t// socket: end stroke\n\t\t// sendStrokeEnd(this.props.socket, this.props.color, this.props.thickness);\n\t}\n\n\tupdateCanvas = (point, client) => {\n\t\t// client: \"self\" | \"other\"\n\t\t// point: Point\n\n\t\t// draw a point\n\t\tif (!this.canvasRef) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar strokes;\n\t\tvar lastPoint;\n\t\t// Error checking\n\t\tif (client == \"self\")\n\t\t{\n\t\t\tif (!this.state.strokes || this.state.strokes.length < 1)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrokes = this.state.strokes\n\t\t\t\tlastPoint = strokes[strokes.length-1]\t\n\t\t\t}\n\t\t} else\n\t\t{\n\t\t\tif (!this.props.otherStrokes || this.props.otherStrokes.length < 3)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tstrokes = this.props.otherStrokes\n\t\t\t\tlastPoint = strokes[strokes.length-2]\t\n\t\t\t}\n\t\t}\n\t\t\n\n\n\n\t\tvar canvas = this.canvasRef.current\n\t\tvar len = strokes.length\n\t\t// console.log(\"canvas is\", canvas == null)\n\n\t\tif (canvas && len > 0) {\n\t\t\tvar {x, y, type, thickness} = point\n\t\t\t// console.log(\"lastpoint is\", lastPoint, \"point is\",)\n\t\t\tvar ctx = canvas.getContext(\"2d\");\n\t\t\tctx.lineWidth = thickness\n\n\t\t\tswitch (type) {\n\t\t\t\tcase \"start\":\n\t\t\t\t\tctx.moveTo(x, y)\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.lineTo(x, y);\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"end\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"move\":\n\t\t\t\t\tctx.beginPath();\n\n\t\t\t\t\tctx.moveTo(lastPoint.x, lastPoint.y)\n\n\t\t\t\t\tctx.globalCompositeOperation = 'source-over';\n\t\t\t\t\tctx.lineTo(x, y);\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\t\t\tctx.fillStyle = point.color;\n\t\t\tctx.strokeStyle = point.color;\n\t\t\tctx.lineJoin = ctx.lineCap = 'round';\n\t\t\tctx.closePath()\n\t\t\tctx.stroke();\t\t\t\n\n\t\t}\n\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.setClickClear(this.clearCanvas);\n\t }\n\t clearCanvas = () => {\n\t\tvar canvas = this.canvasRef.current\n\t\tvar ctx = canvas.getContext(\"2d\");\n\n\t\t// Fill upper half of the canvas with sky\n\t\tctx.fillStyle = \"#efefef\";\n\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\t\t// if (this.props.isFirstLoadDrawCanvas)\n\t\t// {\n\t\t// \t// Fill bottom half of canvas with sea\n\t\t// \tctx.fillStyle = \"#384f83\";\n\t\t// \tctx.fillRect(0, 3*canvas.height/4, canvas.width, canvas.height/4);\n\t\t// }\n\t}\n\n\n\n\thandleCanvas = (canvas) => {\n\t\t// console.log(\"handling canvas\", canvas)\n\t\tif (canvas === null) {\n\t\t\treturn \n\t\t}\n\n\t\tconst ctx = canvas.getContext('2d');\n\t\tcanvas.width = this.props.width;\n\t\tcanvas.height = this.props.height;\n\n\t\tthis.canvasRef = canvas;\n\t\tthis.canvasRef.current = canvas;\n\n\t\tthis.clearCanvas();\n\t}\n\n\n\tgetPathData = (x, y, width, color) => {\n\t\treturn {\n\t\t  drawer: null,\n\t\t  size: {\n\t\t\twidth: this.canvas._size.width,\n\t\t\theight: this.canvas._size.height,\n\t\t  },\n\t\t  path: {\n\t\t\tdata: [`${x.toString()},${y.toString()}`],\n\t\t\t// eslint-disable-next-line radix\n\t\t\twidth: width,\n\t\t\tcolor: color,\n\t\t\tid: parseInt(Math.random() * 100000000),\n\t\t  },\n\t\t};\n\t  };\n\t\n\t  getPathDataArray = (data, width, color) => {\n\t\tparsedArr = [];\n\t\tfor (var i = 0; i < data.length; i++) {\n\t\t  parsedArr.push(`${data[i].x},${data[i].y}`);\n\t\t}\n\t\treturn {\n\t\t  drawer: null,\n\t\t  size: {\n\t\t\twidth: this.canvas._size.width,\n\t\t\theight: this.canvas._size.height,\n\t\t  },\n\t\t  path: {\n\t\t\tdata: parsedArr,\n\t\t\t// eslint-disable-next-line radix\n\t\t\twidth: width,\n\t\t\tcolor: color,\n\t\t\tid: parseInt(Math.random() * 100000000),\n\t\t  },\n\t\t};\n\t  };\n\n\tgetBase64 = async () => {\n\t\tvar canvas = this.canvasRef.current\n\t\t// console.log(\"Getting base64 is\", canvas.toDataURL());\n\n\t\t// toDataURL is a string on web, and a promise on android/ios\n\t\tvar ret = canvas.toDataURL(1.0) \n\n\t\t// web\n\t\tif (typeof(ret) == \"string\") {\n\t\t\tthis.setState((prevState) => ({\n\t\t\t\t...prevState,\n\t\t\t\timagedata: ret,\n\t\t\t}))\n\n\t\t\treturn Promise.resolve(ret)\n\n\n\t\t\t// android/ios\n\t\t} else {\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t// Send stroke point data\n\t// onStrokeChangeHandler = (x, y) => {\n\t// \tsendStroke(this.props.socket, {x: x, y: y, canvasType: \"ai\"}, this.props.color, this.props.thickness);\n\t// };\n\n\t// Send stroke end signal\n\t// onStrokeEndHandler = () => {\n\t// \tsendStrokeEnd(this.props.socket, this.props.color, this.props.thickness);\n\t// };\n\t// onStrokeStartHandler = (x, y) => {\n\t// \tsendStrokeStart(this.props.socket);\n\t// };\n   \n    render() {\n      if (Platform.OS === \"web\") {\n\t\treturn (\n\t\t<View\n\t\t\tstyle= {[styles.drawBoxInner, {width: this.props.width, height: this.props.height, opacity: this.props.opacity}]}\n\t\t\tonStartShouldSetResponder={(event) => {return true;}}\n\t\t\tonMoveShouldSetResponder={(event) => {return true;}}\n\t\t\tonResponderStart={this.onDrawStart}\n\t\t\tonResponderMove={this.onDrawMove}\n\t\t\tonResponderRelease={this.onDrawEnd}\n\t\t>\n        <canvas \n\t\tdraggable={false}\n\n\t\tref={this.handleCanvas}/>\n\t\t</View>\n\t\t)\n\t} else {\n\t\treturn (\n\t\t\t<View\n\t\t\tonStartShouldSetResponder={(event) => {return true;}}\n\t\t\tonMoveShouldSetResponder={(event) => {return true;}}\n\t\t\tonResponderStart={this.onDrawStart}\n\t\t\tonResponderMove={this.onDrawMove}\n\t\t\tonResponderRelease={this.onDrawEnd}\n\t\t\tstyle= {styles.drawBox}\n\t\t\t>\n\t\t\t<Canvas \n\t\t\tdraggable={false}\n\t\t\t\n\t\t\twidth={styles.drawBox.width}\n\t\t\t\t\theight={styles.drawBox.height} \n\t\t\t\t\tref={this.handleCanvas} \n\t\t\t/>\n\t\t\t</View>\n\t\t)\n\t}\n    }\n  }\n\n","export default {\n    // BACKEND_URL: \"104.154.79.84\"\n    BACKEND_URL: \"localhost\"\n}\n","export default {\n        ERASER: \"eraser\",\n        PENCIL: \"pencil\",\n        PAINT: \"paint\",\n        SPLOTCH: \"splotch\",\n        IMAGE_BRUSH: \"image_brush\",\n        IMAGE_CHARCOAL: \"image_charcoal\",\n        IMAGE_BALLPOINT: \"image_ballpoint\",\n        IMAGE_CHALK: \"image_chalk\",\n}\n","import React, { Component, useRef } from 'react';\nimport { Text, View, Platform, StyleSheet, Dimensions } from 'react-native';\nimport Canvas, { Image as CanvasImage } from 'react-native-canvas';\nimport { generateStyle } from '../styles/styles';\nimport Point from \"../classes/Point\";\nimport backendConstants from \"../constants/backendUrl\"\nimport { Asset } from 'expo-asset';\nimport {\n\tsendStroke,\n\tsendStrokeEnd,\n\tsendStrokeStart,\n} from '../api/websocketApi.js';\nimport brushTypes from \"../constants/brushTypes.js\"\nimport userBrushes from \"../constants/userBrushes.js\"\nvar device = Dimensions.get('window');\n\nconst styles = StyleSheet.create(generateStyle(device));\n\n\nexport default class UserCanvas extends Component {\n\n\n\tstate = {\n\t\tstrokes: [],\n\t\timageBrush: 'data:image/png;base64,', // raw image data of the image brush\n\t\timagedata: \"\",\n\t}\n\n\thexToRGB = (hex, alpha) => {\n\n\t\tconst r = parseInt(hex.slice(1, 3), 16);\n\t\tconst g = parseInt(hex.slice(3, 5), 16);\n\t\tconst b = parseInt(hex.slice(5, 7), 16);\n\n\t\tif (alpha) {\n\t\t\treturn `rgba(${r}, ${g}, ${b}, ${alpha})`;\n\t\t}\n\n\t\treturn `rgb(${r}, ${g}, ${b})`;\n\t}\n\n\tmyRand = (min, max) => {\n\t\treturn Math.random() * (max - min) + min;\n\t}\n\tmyRand2 = (val, range) => {\n\t\treturn this.myRand(val - range * val, val + range * val)\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleCanvas = this.handleCanvas.bind(this);\n\t\tthis.thickness = props.thickness\n\t\tthis.color = props.color\n\t\tthis.canvasRef = null;\n\t\tthis.width = props.width;\n\t\tthis.height = props.height;\n\t\tthis.canvasOpacity = props.canvasOpacity;\n\n\t\tthis.state = {\n\t\t\tstrokes: [],\n\t\t\timageBrush: 'data:image/png;base64,', // raw image data of the image brush\n\t\t}\n\t\tthis.clearCanvas = this.clearCanvas.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.setClickClear(this.clearCanvas);\n\t\tthis.defaultWhiteCanvas()\n\t }\n\t makeBrushColor = (color) => {\n\t\tlet currentComponent = this;\n\t\tconsole.log(\"Making newbrush\")\n\n\t\tfetch(`http://${backendConstants.BACKEND_URL}:8000/makeBrush`,\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: JSON.stringify(\n\t\t\t\t\t{\n\t\t\t\t\t\t\"brushType\": this.props.userBrushType,\n\t\t\t\t\t\t\"color\": color\n\t\t\t\t\t})\n\n\t\t\t\t\t\n\t\t\t})\n\t\t\t.then(function (res) {\n\t\t\t\tres.json().then(parsedJson => {\n\t\t\t\t\t// image.src = asset.uri ;\n\t\t\t\t\tcurrentComponent.setState((prevState, props) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t...prevState,\n\t\t\t\t\t\timageBrush: parsedJson.data.imageData\n\t\t\t\t\t}})\n\t\t\t  \n\n\t\t\t\t})\n\n\n\t\t\t})\n\t\t\t.catch(function (res) { console.log(res) })\n\n\t }\n\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.otherStrokes != this.props.otherStrokes) {\n\t\t\tif (this.props.otherStrokes.length > 0) {\n\t\t\t\tvar newStroke = this.props.otherStrokes[this.props.otherStrokes.length-1]\n\t\t\t\tif (newStroke.canvasType == brushTypes.USER)\n\t\t\t\t{\n\t\t\t\t\tthis.updateCanvas(newStroke, \"other\")\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\t// If canvas size has changed\n\t\tif (prevProps.width != this.props.width || prevProps.height != this.props.height) {\n\n\t\n\t\t\t\tthis.canvasRef.current.width = this.props.width;\n\t\t\t\tthis.canvasRef.current.height = this.props.height;\n\n\t\t\t\t// this.clearCanvasKeepState();\n\t\t\t\tconsole.log(\"RESIZING CANVAS\")\n\t\t\t\t// this.loadData();\n\t\t}\n\n\t\tlet currentComponent = this;\n\t\t// If user changed the brush type to image brush changed color, request a new brush image\n\t\tif (this.props.brushType === brushTypes.USER && \n\t\t\t(this.props.userBrushType.includes(\"image\") &&\n\t\t\tprevProps.userBrushType !== this.props.userBrushType) ||\n\t\t\tprevProps.color !== this.props.color) {\n\t\t\t\tconsole.log(\"Making newbrush\")\n\n\t\t\t\tfetch(`http://${backendConstants.BACKEND_URL}:8000/makeBrush`,\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\tbody: JSON.stringify(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"brushType\": this.props.userBrushType,\n\t\t\t\t\t\t\t\t\"color\": this.props.color\n\t\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t\t.then(function (res) {\n\t\t\t\t\t\tres.json().then(parsedJson => {\n\t\t\t\t\t\t\t// image.src = asset.uri ;\n\t\t\t\t\t\t\tcurrentComponent.setState((prevState, props) => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...prevState,\n\t\t\t\t\t\t\t\timageBrush: parsedJson.data.imageData\n\t\t\t\t\t\t\t}})\n\t\t\t\t\t  \n\n\t\t\t\t\t\t})\n\n\n\t\t\t\t\t})\n\t\t\t\t\t.catch(function (res) { console.log(res) })\n\n\t\t\t}\n\n\n\n\n\n\n\t\t// Update collaborator's drawings\n\t\t// DEPRECATED FOR NOW\n\t\t// if (prevProps.otherStrokes != this.props.otherStrokes) {\n\t\t// \t//   console.log(\"collaborator\", prevProps.otherStrokes, \"new:\", this.props.otherStrokes)\n\t\t// \tif (this.props.otherStrokes.length > 0) {\n\t\t// \t\tvar newStroke = this.props.otherStrokes[this.props.otherStrokes.length - 1]\n\t\t// \t\tthis.updateCanvas(newStroke, \"other\")\n\t\t// \t}\n\t\t// }\n\t}\n\n\tonDrawMove = (event) => {\n\t\t// Disable drawing on this canvas if brush type not selected\n\t\tif (this.props.disable ||  this.props.brushType !== brushTypes.USER) {\n\t\t\treturn;\n\t\t}\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\tvar p = new Point(posX, posY, this.props.thickness, this.hexToRGB(this.props.color, this.props.opacity), \"move\")\n\t\tthis.updateCanvas(p, \"self\")\n\n\t\t// Deprecated multi-brush\n\t\t// var q = new Point(posX, posY, this.props.thickness, this.hexToRGB(this.props.color,0.9), \"move\")\n\t\t// q.offset = this.props.thickness*0.5\n\t\t// this.updateCanvas(q, \"self\")\n\n\t\t// var q = new Point(posX, posY, this.props.thickness*0.4, this.hexToRGB(this.props.color,0.9), \"move\")\n\t\t// q.offset = -this.props.thickness*0.4\n\t\t// this.updateCanvas(q, \"self\")\n\n\t\t// var q = new Point(posX, posY, this.props.thickness*0.4, this.hexToRGB(this.props.color,0.95), \"move\")\n\t\t// q.offset = this.props.thickness*0.4\n\t\t// this.updateCanvas(q, \"self\")\n\n\n\t\t// var r = new Point(posX, posY+this.props.thickness*0.8, this.props.thickness, this.hexToRGB(this.props.color,0.4), \"move\")\n\t\t// this.updateCanvas(r, \"self\")\n\n\n\t\t// Create stroke move object\n\t\tthis.setState(prevState => ({\n\t\t\t...prevState,\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t}))\n\t\t// sendStroke(this.props.socket, {x: posX/this.width, y: posY/this.height, canvasType: \"user\"}, this.props.color, this.props.thickness)\n\n\t}\n\n\tonDrawStart = (event) => {\n\t\t// Disable drawing on this canvas if brush type not selected\n\t\tif (this.props.disable ||  this.props.brushType !== brushTypes.USER) {\n\t\t\treturn;\n\t\t}\n\t\t// console.log(\"Got start event:\", event)\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\t// Create stroke move object\n\t\tvar p = new Point(posX, posY, this.props.thickness, this.props.color, \"start\", \"user\")\n\t\tthis.updateCanvas(p, \"self\")\n\n\t\tthis.setState(prevState => ({\n\t\t\t...prevState,\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t}))\n\t\t// socket: start stroke\n\t\t// sendStrokeStart(this.props.socket, {x: p.x, y: p.y}, p.thickness, p.color);\n\n\t}\n\n\tonDrawEnd = (event) => {\n\t\t// Disable drawing on this canvas if brush type not selected\n\t\tif (this.props.disable ||  this.props.brushType !== brushTypes.USER) {\n\t\t\treturn;\n\t\t}\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\t// Create stroke move object\n\t\tvar p = new Point(posX, posY, this.props.thickness, this.props.color, \"end\", \"user\")\n\t\tthis.updateCanvas(p, \"self\")\n\n\t\tthis.setState(prevState => ({\n\t\t\t...prevState,\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t}))\n\t\t// socket: end stroke\n\t\t// sendStrokeEnd(this.props.socket, this.props.color, this.props.thickness);\n\t}\n\n\tclearCanvas = () => {\n\n\t\tthis.setState(prevState => ({\n\t\t\t...prevState,\n\t\t\timagedata: \"\"\n\t\t}))\n\t\tvar canvas = this.canvasRef.current\n\t\tvar ctx = canvas.getContext(\"2d\");\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t}\n\n\tclearCanvasKeepState = () => {\n\t\tvar canvas = this.canvasRef.current\n\t\tvar ctx = canvas.getContext(\"2d\");\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t}\n\n\tupdateCanvas = (point, client) => {\n\t\t// client: \"self\" | \"other\"\n\t\t// point: Point\n\n\t\t// draw a point\n\t\tif (!this.canvasRef) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offset = point.offset || 0;\n\n\t\tvar strokes;\n\t\tvar lastPoint;\n\t\t// Error checking\n\t\tif (client == \"self\") {\n\t\t\tif (!this.state.strokes || this.state.strokes.length < 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrokes = this.state.strokes\n\t\t\t\tlastPoint = strokes[strokes.length - 1]\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this.props.otherStrokes || this.props.otherStrokes.length < 3) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tstrokes = this.props.otherStrokes\n\t\t\t\tlastPoint = strokes[strokes.length - 2]\n\t\t\t}\n\t\t}\n\n\n\n\n\t\tvar canvas = this.canvasRef.current\n\t\tvar len = strokes.length\n\t\t// console.log(\"canvas is\", canvas == null)\n\n\t\tif (canvas && len > 0) {\n\t\t\tvar { x, y, type, thickness } = point\n\t\t\t// console.log(\"lastpoint is\", lastPoint, \"point is\",)\n\t\t\tvar ctx = canvas.getContext(\"2d\");\n\t\t\tctx.lineWidth = thickness\n\n\t\t\tswitch (type) {\n\t\t\t\tcase \"start\":\n\t\t\t\t\tctx.moveTo(x - offset, y - offset)\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.lineTo(x - offset, y - offset);\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"end\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"move\":\n\t\t\t\t\tctx.beginPath();\n\n\t\t\t\t\tctx.moveTo(lastPoint.x - offset, lastPoint.y - offset)\n\n\t\t\t\t\tctx.lineTo(x - offset, y - offset);\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif (this.props.userBrushType == userBrushes.PAINT) {\n\t\t\t\tctx.fillStyle = this.hexToRGB(this.props.color, this.props.opacity);\n\t\t\t\tctx.strokeStyle = this.hexToRGB(this.props.color, this.props.opacity);\n\t\t\t\tctx.lineJoin = 'miter';\n\t\t\t\tctx.lineCap = \"butt\";\n\t\t\t\tconsole.log(\"IANTNT\", ctx.lineJoin, ctx.lineCap)\n\n\t\t\t\tctx.closePath()\n\t\t\t\tctx.stroke();\n\t\t\t}\n\n\t\t\telse if (this.props.userBrushType == userBrushes.PENCIL) {\n\t\t\t\tctx.fillStyle = this.hexToRGB(this.props.color, this.props.opacity);\n\t\t\t\tctx.strokeStyle = this.hexToRGB(this.props.color, this.props.opacity);\n\t\t\t\tctx.lineJoin = ctx.lineCap = 'round';\n\t\t\t\tctx.closePath()\n\t\t\t\tctx.stroke();\n\t\t\t}\n\n\t\t\telse if (this.props.userBrushType == userBrushes.ERASER) {\n\t\t\t\tctx.globalCompositeOperation = \"destination-out\";  \n\t\t\t\tctx.lineJoin = ctx.lineCap = 'round';\n\n\t\t\t\tctx.strokeStyle = \"rgba(255,255,255,1)\";\n\t\t\t\tctx.closePath()\n\t\t\t\tctx.stroke();\n\t\t\t\tctx.globalCompositeOperation = \"source-over\"; // reset to default  \n\n\t\t\t}\n\n\n\n\t\t\t// SPLOTCH BRUSH\n\t\t\telse if (this.props.userBrushType == userBrushes.SPLOTCH) {\n\t\t\t\tif (Math.random() < 0.99) {\n\t\t\t\t\t// ctx.stroke();\t\t\t\n\t\t\t\t\tctx.beginPath()\n\t\t\t\t\tctx.arc(x - offset, y - offset, Math.random() * thickness/2, false, Math.PI * 2, false);\n\t\t\t\t\tctx.fillStyle = this.hexToRGB(this.props.color, Math.random());\n\n\t\t\t\t\tctx.fill();\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (this.props.userBrushType.includes(\"image\")) {\n\t\t\t\t// IMAGE BRUSH\n\t\t\t\tctx.globalAlpha = this.props.opacity\n\n\t\t\t\tconst image = new Image(canvas);\n\t\t\t\timage.src = this.state.imageBrush\n\n\t\t\t\tctx.save();\n\n\t\t\t\tctx.translate((x - offset - thickness / 2)+thickness/2, (y - offset - thickness / 2)+thickness/2);\n\t\t\t\tvar angle = Math.atan2(y-lastPoint.y, x-lastPoint.x) * 180 / Math.PI;\n\t\t\t\tctx.rotate(angle*Math.PI/180.0);\n\t\t\t\tctx.translate(-(x - offset - thickness / 2)-thickness/2, -(y - offset - thickness / 2)-thickness/2);\n\t\t\t\tctx.drawImage(image, x - offset - thickness / 2, y - offset - thickness / 2, thickness, thickness);\n\t\t\t\tctx.restore();\n\n\t\t\t\tctx.globalAlpha = 1\n\n\t\t\t}\n\n\n\n\n\n\t\t}\n\n\t}\n\tloadData = (imageData) => {\n\t\t\tvar canvas = this.canvasRef.current\n\n\t\t\tvar ctx = canvas.getContext(\"2d\");\n\t\t\tconst image = new Image(canvas);\n\t\n\t\t\timage.src = imageData\n\t\t\tctx.save();\n\t\t\tctx.drawImage(image,0,0, this.props.width, this.props.height);\n\t\t\tctx.restore();\n\t\t\n\t}\n\n\n\thandleCanvas = (canvas) => {\n\t\tif (canvas === null) {\n\t\t\treturn \n\t\t}\n\t\t// console.log(\"handling canvas\", canvas)\n\n\t\tconst ctx = canvas.getContext('2d');\n\t\tcanvas.width = this.props.width;\n\t\tcanvas.height = this.props.height;\n\n\n\n\t\tthis.canvasRef = canvas;\n\t\tthis.canvasRef.current = canvas;\n\n\n\n\t}\n\n\n\tgetPathData = (x, y, width, color) => {\n\t\treturn {\n\t\t\tdrawer: null,\n\t\t\tsize: {\n\t\t\t\twidth: this.canvas._size.width,\n\t\t\t\theight: this.canvas._size.height,\n\t\t\t},\n\t\t\tpath: {\n\t\t\t\tdata: [`${x.toString()},${y.toString()}`],\n\t\t\t\t// eslint-disable-next-line radix\n\t\t\t\twidth: width,\n\t\t\t\tcolor: color,\n\t\t\t\tid: parseInt(Math.random() * 100000000),\n\t\t\t},\n\t\t};\n\t};\n\n\tgetPathDataArray = (data, width, color) => {\n\t\tparsedArr = [];\n\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\tparsedArr.push(`${data[i].x},${data[i].y}`);\n\t\t}\n\t\treturn {\n\t\t\tdrawer: null,\n\t\t\tsize: {\n\t\t\t\twidth: this.canvas._size.width,\n\t\t\t\theight: this.canvas._size.height,\n\t\t\t},\n\t\t\tpath: {\n\t\t\t\tdata: parsedArr,\n\t\t\t\t// eslint-disable-next-line radix\n\t\t\t\twidth: width,\n\t\t\t\tcolor: color,\n\t\t\t\tid: parseInt(Math.random() * 100000000),\n\t\t\t},\n\t\t};\n\t};\n\n\tgetBase64 = async () => {\n\t\tvar canvas = this.canvasRef.current\n\t\t// console.log(\"Getting base64 is\", canvas.toDataURL());\n\n\t\tvar ret = canvas.toDataURL()\n\n\t\t// web\n\t\tif (typeof (ret) == \"string\") {\n\t\t// toDataURL is a string on web, and a promise on android/ios\n\t\tthis.setState((prevState) => ({\n\t\t\t...prevState,\n\t\t\timagedata: ret,\n\t\t}))\n\t\t\treturn Promise.resolve(ret)\n\t\t\t// android/ios\n\t\t} else {\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\n\t// FOR COLLABORATIVE DRAWING \n\t// DISABLED FOR NOW\n\n\t// Send stroke point data\n\t// onStrokeChangeHandler = (x, y) => {\n\t// \tsendStroke(this.props.socket, { x: x, y: y, canvasType: \"user\"}, this.props.color, this.props.thickness);\n\t// };\n\n\t// Send stroke end signal\n\tonStrokeEndHandler = () => {\n\t\t// sendStrokeEnd(this.props.socket, this.props.color, this.props.thickness);\n\t};\n\tonStrokeStartHandler = (x, y) => {\n\t\t// sendStrokeStart(this.props.socket);\n\t};\n\n\tdefaultWhiteCanvas = () => {\n\t\tvar canvas = this.canvasRef.current\n\t\tvar ctx = canvas.getContext(\"2d\");\n\n\t\t// Fill upper half of the canvas with sky\n\t\tctx.fillStyle = \"rgba(255,255,255,0.0)\";\n\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\n\t}\n\n\trender() {\n\t\tif (Platform.OS === \"web\") {\n\t\t\treturn (\n\t\t\t\t<View\n\t\t\t\t\tstyle={[styles.drawBoxInner, { width: this.props.width, height: this.props.height }]}\n\t\t\t\t\tonStartShouldSetResponder={(event) => { return true; }}\n\t\t\t\t\tonMoveShouldSetResponder={(event) => { return true; }}\n\t\t\t\t\tonResponderStart={this.onDrawStart}\n\t\t\t\t\tonResponderMove={this.onDrawMove}\n\t\t\t\t\tonResponderRelease={this.onDrawEnd}\n\t\t\t\t>\n\t\t\t\t\t<canvas \n\t\t\t\t\tdraggable={false}\n\t\t\t\t\tref={this.handleCanvas} id=\"mycanvas\"\n\t\t\t\t\twidth={this.props.width}\n\t\t\t\t\theight={this.props.height}\n\t\t\t\t\t />\n\t\t\t\t</View>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<View\n\t\t\t\t\tonStartShouldSetResponder={(event) => { return true; }}\n\t\t\t\t\tonMoveShouldSetResponder={(event) => { return true; }}\n\t\t\t\t\tonResponderStart={this.onDrawStart}\n\t\t\t\t\tonResponderMove={this.onDrawMove}\n\t\t\t\t\tonResponderRelease={this.onDrawEnd}\n\t\t\t\t\tstyle={styles.drawBox}\n\t\t\t\t>\n\t\t\t\t\t<Canvas width={styles.drawBox.width}\n\t\t\t\t\t\theight={styles.drawBox.height}\n\t\t\t\t\t\tref={this.handleCanvas}\n\t\t\t\t\t\tid=\"mycanvas\"\n\t\t\t\t\t\tdraggable={false}\n\t\t\t\t\t/>\n\t\t\t\t</View>\n\t\t\t)\n\t\t}\n\t}\n}\n\n","import React, { useEffect, useState  } from 'react';\nimport {\n  View,\n} from \"react-native\";\nimport { Button, Select, Input, Typography, Card, Image } from 'antd';\nconst { Title } = Typography;\n \nconst options = [\n\t{ value: '3D绘画', label: '3D绘画' },\n\t{ value: '油画', label: '油画' },\n\t{ value: '插画', label: '插画' },\n\t{ value: '概念画', label: '概念画' },\n\t{ value: '科幻', label: '科幻' },\n\t{ value: '古风', label: '古风' },\n\t{ value: '未来感', label: '未来感' },\n\t{ value: '高清', label: '高清' },\n\t{ value: '壁纸', label: '壁纸' },\n\t{ value: '色彩艳丽', label: '色彩艳丽' },\n\t{ value: '黑白', label: '黑白' },\n]\n\nconst InspireMode = (props) => {\n\tconst {localurl} = props;\n\tconst [prompt, setPrompt] = useState({\n\t\t\"one\": '',\n\t\t\"two\": '',\n\t\t\"three\": ''\n\t});\n\tconst [style, setStyle] = useState({\n\t\t\"one\": '',\n\t\t\"two\": '',\n\t\t\"three\": ''\n\t}) ;\n\tconst [list, setList] = useState({\n\t\t\"one\": [],\n\t\t\"two\": [],\n\t\t\"three\": []\n\t});\n\n\tconst sections = [\"one\", \"two\", \"three\"];\n\n  useEffect(() => {\n    console.log(\"Mounting...\");\n  },[]);\n\n\tconst handleGenerate = async (index) => {\n\t\tconsole.log(index);\n\t\tconsole.log(`${prompt[index]},${style[index]}`);\n\n\t\tconst response = await fetch(`${localurl}/inspire`, {\n      method: 'POST',\n      headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Token f40e401a60e03f6ae459a36e1faa4e5c575819f5'\n      },\n      body: JSON.stringify({\n        prompt: `${prompt[index]},${style[index]}`,\n      }),\n    });\n\n    const msg = await response.json()\n    console.log(msg.data)\n\n\t\tif(index === \"one\") {\n\t\t\tsetList((olddata)=>{\n\t\t\t\treturn{\n\t\t\t\t...olddata,\n\t\t\t\tone: msg.data\n\t\t\t\t}\n\t\t\t})\n\t\t}else if(index === \"two\"){\n\t\t\tsetList((olddata)=>{\n\t\t\t\treturn{\n\t\t\t\t...olddata,\n\t\t\t\ttwo: msg.data\n\t\t\t\t}\n\t\t\t})\n\t\t}else{\n\t\t\tsetList((olddata)=>{\n\t\t\t\treturn{\n\t\t\t\t...olddata,\n\t\t\t\tthree: msg.data\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{sections.map((section, index) => (\n\t\t\t\t<View style={{ flexDirection: \"row\", margin: \"2%\" }}>\n\t\t\t\t\t<Card style={{ width: \"40%\" }}>\n\t\t\t\t\t\t<Title style={{ margin: 10 }} level={5}>图片{index+1}</Title>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\tif(section === \"one\") {\n\t\t\t\t\t\t\t\t\tsetPrompt((olddata)=>{\n\t\t\t\t\t\t\t\t\t\treturn{\n\t\t\t\t\t\t\t\t\t\t...olddata,\n\t\t\t\t\t\t\t\t\t\tone: e.target.value\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}else if(section === \"two\"){\n\t\t\t\t\t\t\t\t\tsetPrompt((olddata)=>{\n\t\t\t\t\t\t\t\t\t\treturn{\n\t\t\t\t\t\t\t\t\t\t...olddata,\n\t\t\t\t\t\t\t\t\t\ttwo: e.target.value\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tsetPrompt((olddata)=>{\n\t\t\t\t\t\t\t\t\t\treturn{\n\t\t\t\t\t\t\t\t\t\t...olddata,\n\t\t\t\t\t\t\t\t\t\tthree: e.target.value\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tstyle={{ width: '90%', marginTop: \"10px\" }}\n\t\t\t\t\t\t\tplaceholder=\"文字描述\"\n\t\t\t\t\t\t\tvalue={prompt[section]}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\tmode=\"multiple\"\n\t\t\t\t\t\t\tallowClear\n\t\t\t\t\t\t\tstyle={{ width: '70%', maxWidth: '70%', marginTop: \"15px\", marginRight: \"10px\" }}\n\t\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\t\tif(section === \"one\") {\n\t\t\t\t\t\t\t\t\tsetStyle((olddata)=>{\n\t\t\t\t\t\t\t\t\t\treturn{\n\t\t\t\t\t\t\t\t\t\t...olddata,\n\t\t\t\t\t\t\t\t\t\tone: `${value}`\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}else if(section === \"two\"){\n\t\t\t\t\t\t\t\t\tsetStyle((olddata)=>{\n\t\t\t\t\t\t\t\t\t\treturn{\n\t\t\t\t\t\t\t\t\t\t...olddata,\n\t\t\t\t\t\t\t\t\t\ttwo: `${value}`\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tsetStyle((olddata)=>{\n\t\t\t\t\t\t\t\t\t\treturn{\n\t\t\t\t\t\t\t\t\t\t...olddata,\n\t\t\t\t\t\t\t\t\t\tthree: `${value}`\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tplaceholder=\"风格，多选\"\n\t\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button type=\"primary\" style={{ width: '20%', marginTop: \"15px\" }} onClick = {() => handleGenerate(section)} >生成</Button>\n\t\t\t\t\t</Card>\n\t\t\t\t\t<Card style={{ width: \"60%\" }}>\n\t\t\t\t\t\t<Image.PreviewGroup>\n\t\t\t\t\t\t\t<Image width={\"33%\"} src={list[section][0]} />\n\t\t\t\t\t\t\t<Image width={\"33%\"} src={list[section][1]} />\n\t\t\t\t\t\t\t<Image width={\"33%\"} src={list[section][2]} />\n\t\t\t\t\t\t</Image.PreviewGroup>\n\t\t\t\t\t</Card>\n\t\t\t\t</View>\n      ))}\n\t\t</>\n\t);\n}\n \nexport default InspireMode;\n\n","export default {\n  colors: [\n    {\n      color: '#384f83',\n      id: 154,\n      label: 'Sea',\n      logo: require('../resources/seaLogo.png'),\n      // logo: require('../resources/tmp/seaLogo2.png'),\n    },\n    {\n      color: '#efefef',\n      id: 105,\n      label: 'Cloud',\n      logo: require('../resources/cloudLogo.png'),\n      // logo: require('../resources/tmp/cloudLogo2.png'),\n      labelColor: \"#d3d3d3\"\n    },\n    {\n      color: '#2c1e16',\n      id: 110,\n      label: 'Dirt',\n      logo: require('../resources/dirtLogo.png'),\n      // logo: require('../resources/tmp/dirtLogo2.png'),\n    },\n    {\n      color: '#5d6e32',\n      id: 96,\n      label: 'Bush',\n      logo: require('../resources/bushLogo.png'),\n      // logo: require('../resources/tmp/bushLogo2.png'),\n    },\n    {\n      color: '#b7d24e',\n      id: 123,\n      label: 'grass',\n      labelColor: 'black',\n      logo: require('../resources/bushLogo.png'),\n    },\n    {\n      color: '#3c3b4b',\n      id: 134,\n      label: 'Mountain',\n      logo: require('../resources/mountainLogo.png'),\n      // logo: require('../resources/tmp/mountainLogo2.png'),\n    },\n    // {\n    //   color: '#987e6a',\n    //   id: 148,\n    //   label: 'road',\n    //   logo: './resources/roadLogo.png',\n    // },\n    {\n      color: '#759edf',\n      id: 156,\n      label: 'Sky',\n      logo: require('../resources/skyLogo.png'),\n      // logo: require('../resources/tmp/skyLogo2.png'),\n    },\n    {\n      color: '#352613',\n      id: 168,\n      label: 'Tree',\n      logo: require('../resources/treeLogo.png'),\n      // logo: require('../resources/tmp/treeLogo2.png'),\n    },\n    // {\n    //   color: '#c1c3c9',\n    //   id: 119,\n    //   label: 'fog',\n    //   logo: './resources/fogLogo.png',\n    // },\n    {\n      color: '#776c2d',\n      id: 126,\n      label: 'Hill',\n      logo: require('../resources/hillLogo.png'),\n      // logo: require('../resources/tmp/hillLogo2.png'),\n    },\n    // {\n    //   color: '#bf602c', \n    //   id: 128,\n    //   label: 'leaves',\n    //   logo: './resources/leavesLogo.png',\n    // },\n    {\n      color: '#32604d',\n      id: 147,\n      label: 'River',\n      logo: require('../resources/riverLogo.png'),\n      // logo: require('../resources/tmp/riverLogo2.png'),\n    },\n    {\n      color: '#000000',\n      id: 100,\n      label: 'user brush',\n      // logo: './resources/flowerLogo.png',\n    },\n    // {\n    //   color: '#fafafa',\n    //   id: 158,\n    //   label: 'snow',\n    //   labelColor: 'black',\n    //   logo: './resources/snowLogo.png',\n    // },\n  ],\n};\n","export default {\n  styles: [\n    {\n      name: 'kanagawa',\n      label: 'Kanagawa',\n      image_url: require('../resources/kanagawa.jpg'),\n    },\n    {\n      name: 'starry_night',\n      label: 'Starry Night',\n      image_url: require('../resources/starry_night.jpg'),\n    },\n    {\n      name: 'rain_princess',\n      label: 'Rain Princess',\n      image_url: require('../resources/rain_princess.jpg'),\n    },\n    {\n      name: 'candy',\n      label: 'Candy',\n      image_url: require('../resources/candy.jpg'),\n    },\n    {\n      name: 'mosaic',\n      label: 'Mosaic',\n      image_url: require('../resources/mosaic.jpg'),\n    },\n    {\n      name: 'udnie',\n      label: 'Udnie',\n      image_url: require('../resources/udnie.jpg'),\n    },\n  ],\n};\n","export default {\n  userBrushes: [\n    {\n      name: 'eraser',\n      label: 'Eraser',\n      image_url: require('../resources/brushes/Eraser.png'),\n    },\n    {\n      name: 'pencil',\n      label: 'Marker',\n      image_url: require('../resources/brushes/Marker.png'),\n    },\n    {\n      name: 'paint',\n      label: 'Highlighter',\n      image_url: require('../resources/brushes/Highlighter.png'),\n    },\n    {\n      name: 'splotch',\n      label: 'Splotch',\n      image_url: require('../resources/brushes/Splotch.png'),\n    },\n    {\n      name: 'image_brush',\n      label: 'Crayon',\n      image_url: require('../resources/brushes/Crayon.png'),\n    },\n    {\n      name: 'image_charcoal',\n      label: 'Charcoal',\n      image_url: require('../resources/brushes/Charcoal.png'),\n    },\n    {\n      name: 'image_ballpoint',\n      label: 'Ballpoint',\n      image_url: require('../resources/brushes/Ballpoint.png'),\n    },\n    {\n      name: 'image_chalk',\n      label: 'Chalk',\n      image_url: require('../resources/brushes/Chalk.png'),\n    },\n    ],\n};\n","export default {\n        filters: [\n                {\n                        name: 'blur',\n                        label: 'Blur',\n                        filter: \"blur(2px)\",\n                        image_url: require('../resources/filters/blur.png'),\n                },\n                {\n                        name: 'sepia',\n                        label: 'Sepia',\n                        filter: \"sepia(100)\",\n                        image_url: require('../resources/filters/sepia.png'),\n                },\n                {\n                        name: 'grey',\n                        label: 'Grey',\n                        filter: \"grayscale(80%)\",\n                        image_url: require('../resources/filters/grey.png'),\n                },\n                {\n                        name: 'contrast',\n                        label: 'Contrast',\n                        filter: \"contrast(150%)\",\n                        image_url: require('../resources/filters/contrast.png'),\n                },\n                {\n                        name: 'fade',\n                        label: 'Fade',\n                        filter: \"blur(0.2px) brightness(110%) hue-rotate(5deg) saturate(0.5) opacity(85%)\",\n                        //                         filter: \"blur('0.2px'),brightness(110%),hue-rotate('5deg') opacity(0.9) saturate(1.3) sepia(40)\",\n\n                        image_url: require('../resources/filters/fade.png'),\n                },\n                {\n                        name: 'invert',\n                        label: 'Invert',\n                        filter: \"invert(100%) hue-rotate(90deg)\",\n                        image_url: require('../resources/filters/invert.png'),\n                }\n        ],\n};\n","import React, { Component } from \"react\";\nimport {\n  ActivityIndicator,\n  StyleSheet,\n  View,\n  Button,\n  Dimensions,\n  Image,\n  TouchableOpacity,\n  Text,\n  TextInput,\n  ImageBackground,\n} from \"react-native\";\nimport DrawCanvas from \"./components/DrawCanvas\";\nimport UserCanvas from \"./components/UserCanvas\";\nimport InspireMode from \"./components/InspireMode\";\n\nimport Slider from \"@react-native-community/slider\";\nimport colorMap from \"./constants/colorMap.js\";\nimport brushTypes from \"./constants/brushTypes.js\";\nimport userBrushes from \"./constants/userBrushes.js\";\nimport styleTransferOptions from \"./constants/styleTransferOptions.js\";\nimport userBrushesOptions from \"./constants/userBrushesOptions.js\";\nimport filterOptions from \"./constants/filterBrushOptions.js\";\n\nimport messageKinds from \"./constants/messageKinds.js\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { RgbaColorPicker } from \"react-colorful\";\n\nvar device = Dimensions.get(\"window\");\nconst CANVASWIDTH = device.height * 0.8;\nconst CANVASHEIGHT = device.height * 0.8;\n\n// const LOCALURL = \"http://127.0.0.1:8000\";\n// const LOCALURL = \"http://region-11.autodl.com:25172\"\nconst LOCALURL = \"\"\n\n// Connect to Go backend\n// for web\n// for android\n// let this.state.socket = new WebSocket('ws://10.0.2.2:8080/ws');\n\n// Create dynamic style based on device width/height\n// const styles = StyleSheet.create(generateStyle(device));\n\nexport default class App extends Component {\n  // React state: store the image data\n  state = {\n    showAICanvas: true,\n    showInspireMode: false,\n    showUserCanvas: false,\n\n    rightColumnWidth: device.height * 0.11 * 1.8,\n    rightColumnMargin: device.height * 0.007,\n\n    leftColumnWidth: device.height * 0.25,\n    leftColumnLeftMargin: device.height * 0.007,\n    //device.width - (device.height * (0.85 * 1.25 + 0.11 * 1.8 + 0.25 + 0.007 + 0.3))\n\n    //canvas + small canvas, right col, left col, marginleft of left col\n    AI_CANVASWIDTH: Math.min(\n      (device.width - device.height * (0.11 * 1.8 + 0.25 + 0.007 + 0.15)) * 0.65,\n      device.height * 0.65\n    ),\n    // device.height * (0.85 * 1.25 + 0.11 * 1.8 + 0.25 + 0.007) > device.width\n    //   ? device.height * 0.5\n    //   : device.height * 0.85,\n    AI_CANVASHEIGHT: Math.min(\n      (device.width - device.height * (0.11 * 1.8 + 0.25 + 0.007 + 0.15)) * 0.65,\n      device.height * 0.65\n    ),\n    //AI_CANVASWIDTH: device.height * 0.85,\n    //AI_CANVASHEIGHT: device.height * 0.85,\n\n    //USER_CANVASWIDTH: device.height * 0.85,\n    //USER_CANVASHEIGHT: device.height * 0.85,\n    USER_CANVASWIDTH: Math.min(\n      (device.width - device.height * (0.11 * 1.8 + 0.25 + 0.007 + 0.15)) * 0.65,\n      device.height * 0.65\n    ),\n    USER_CANVASHEIGHT: Math.min(\n      (device.width - device.height * (0.11 * 1.8 + 0.25 + 0.007 + 0.15)) * 0.65,\n      device.height * 0.65\n    ),\n    aiCanvasImageData: \"data:image/png;base64,\", // image data of the ai canvas\n\n    imageData: \"data:image/png;base64,\", // raw image data of the segmentation image\n    generatedImageData: \"data:image/png;base64,\", // raw image data of the generated image\n    stylizedImageData: \"data:image/png;base64,\", // raw image data of stylized generated image\n    displayedImageData: \"data:image/png;base64,\", // raw image data of displayed image\n    finalImageData: \"data:image/png;base64,\", // raw image data of generatedImageData + userCanvasImageData\n    style: \"none\", // selected style\n    color: \"#384f83\", // pen color\n    imageFilter: \"\",\n    userBrushColor: \"#00FF00\",\n    colorPickerDisplay: { r: 0, g: 255, b: 0, a: 1 }, // another color state to keep track of the current color picker state\n\n    userBrushBase64: \"data:image/png;base64,\", // user brush\n    userBrushType: userBrushes.PENCIL,\n    styleBrushType: \"None\",\n    filterBrushType: \"None\",\n    thickness: 10, // stroke thickness\n    ownStroke: [], // client stroke data\n    collaboratorStroke: [], // collaborator data\n    opacity: 1, // Toggle between the drawing canvas and generated image.\n    displayColorPicker: false,\n    disableDrawing: false, // used when eyedropper is active\n    disableButtons: false, // used when the eyedropper is active\n    // 1 = show drawing canvas, 0 = show image\n    // socket: new WebSocket('ws://localhost:8080/ws')\n    // socket:\n    //   Platform.OS === \"web\"\n    //     ? new WebSocket(`ws://${backendConstants.BACKEND_URL}:8080/ws`)\n    //     : new WebSocket(`ws://${backendConstants.BACKEND_URL}:8080/ws`),\n    canvasWidth: CANVASWIDTH,\n    canvasHeight: CANVASHEIGHT,\n    currentBrush: brushTypes.AI,\n\n    showPreview: true, // show the preview of the other canvas at the top left corner\n\n    isLoading: true, //for loading spinner\n    isChangeSize: false, //for slider\n\n    isFirstLoadDrawCanvas: true, // show a default segmentation map for the first time in the AI canvas\n    text: '',\n    flag: 1\n  };\n\n  constructor(props) {\n    super(props);\n    this.sendRequestHelper = this.sendRequestHelper.bind(this);\n  }\n\n  // Run when component is first rendered\n  componentDidMount() {\n    console.log(\"Attempting connection\");\n\n    this.setState((prevState) => ({\n      ...prevState,\n      isLoading: false,\n      isFirstLoadDrawCanvas: false,\n    }));\n  }\n  // get image data from canvas\n  // Then call sendRequest to send the data to backend\n  grabPixelsGan = async () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n      flag: 1\n    }));\n    var getImage = this.refs.drawCanvasRef.getBase64().then((value) => {\n      var resultImage = value.split(\";base64,\")[1];\n      console.log(\"result image is\", resultImage);\n      this.setState(\n        (prevState) => ({\n          ...prevState,\n          imageData: resultImage,\n        }),\n        // Do callback to send to server after the imageData is set\n        this.sendRequestHelper\n      );\n    });\n  };\n\n  grabPixelsSd = async () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n      flag: 2\n    }));\n    var getImage = this.refs.drawCanvasRef.getBase64().then((value) => {\n      var resultImage = value.split(\";base64,\")[1];\n      console.log(\"result image is\", resultImage);\n      this.setState(\n        (prevState) => ({\n          ...prevState,\n          imageData: resultImage,\n        }),\n        // Do callback to send to server after the imageData is set\n        this.sendRequestHelper\n      );\n    });\n  };\n\n  grabPixelsCN = async () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n      flag: 3\n    }));\n    var getImage = this.refs.drawCanvasRef.getBase64().then((value) => {\n      var resultImage = value.split(\";base64,\")[1];\n      console.log(\"result image is\", resultImage);\n      this.setState(\n        (prevState) => ({\n          ...prevState,\n          imageData: resultImage,\n        }),\n        // Do callback to send to server after the imageData is set\n        this.sendRequestHelper\n      );\n    });\n  };\n\n  // Send request to model server to generate painting\n  sendRequestHelper = async () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n    }));\n\n    const response = await fetch(`${LOCALURL}/generate`, {\n      method: 'POST',\n      headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Token f40e401a60e03f6ae459a36e1faa4e5c575819f5'\n      },\n      body: JSON.stringify({\n        imageData: this.state.imageData,\n        prompt: this.state.text,\n        flag: this.state.flag\n      }),\n    });\n\n    const msg = await response.json()\n    console.log(msg)\n    this.setState((prevState) => ({\n      ...prevState,\n      generatedImageData: msg.data,\n      displayedImageData: msg.data,\n    }));\n\n    this.setState((prevState) => ({\n      ...prevState,\n      isLoading: false,\n    }));\n\n  };\n  // Send a request to the model server to stylize the generated painting\n  sendRequestStyleHelper = async (newStyle) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n    }));\n\n    const response = await fetch(`${LOCALURL}/stylize`, {\n      method: 'POST',\n      headers: {\n          'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        imageData: this.state.generatedImageData,\n        style: newStyle,\n      }),\n    });\n\n    const msg = await response.json();\n    console.log(msg)\n    this.setState((prevState) => ({\n      ...prevState,\n      styleBrushType: newStyle,\n      stylizedImageData: msg.data,\n      displayedImageData: msg.data,\n    }));\n\n    this.setState((prevState) => ({\n      ...prevState,\n      isLoading: false,\n    }));\n\n  };\n  // xxxxx\n  saveGeneratedImage = () => {\n    if (this.refs.userCanvasRef == null) {\n      alert(\n        \"Unable to save the painting in AI Brush. Please select 'User Brush' or 'Style' or 'Filter' and try again.\"\n      );\n      return;\n    } else {\n      var getImage = this.refs.userCanvasRef.getBase64().then((value) => {\n        var resultImage = value.split(\";base64,\")[1];\n        var foregroundImageDataStripped =\n          this.state.displayedImageData.split(\";base64,\")[1];\n        this.setState((prevState) => ({\n          ...prevState,\n          isLoading: true,\n        }));\n        this.state.socket.send(\n          JSON.stringify({\n            kind: messageKinds.MESSAGE_SAVE,\n            data: {\n              displayedImageData: foregroundImageDataStripped,\n              userCanvasImageData: resultImage,\n              aiCanvasImageData: this.state.imageData,\n            },\n          })\n        );\n      });\n    }\n  };\n\n  handleThickness = (sliderValue) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      thickness: sliderValue,\n      isChangeSize: true,\n    }));\n    console.log(\"thickness is now\", sliderValue);\n  };\n\n  handleThicknessEnd = (sliderValue) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      isChangeSize: false,\n    }));\n    console.log(\"thickness is done chaging\", sliderValue);\n  };\n\n  handleOpacity = (sliderValue) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      opacity: sliderValue,\n    }));\n    console.log(\"opacity is now\", sliderValue);\n  };\n\n  // Convert object of rgb {r: g: b:} to hex string\n  rgbToHex = (d) => {\n    const red = d.r;\n    const green = d.g;\n    const blue = d.b;\n    const rgb = (red << 16) | (green << 8) | (blue << 0);\n    return \"#\" + (0x1000000 + rgb).toString(16).slice(1);\n  };\n  hex2rgb = (hex) => {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    // return {r, g, b} // return an object\n    return { r: r, g: g, b: b, a: 1 };\n  };\n\n  // Enable the AI canvas for drawing\n  // Display the\n  enableAICanvas = () => {\n    if (this.state.showAICanvas) {\n      return;\n    }\n\n    // Save the drawcanvas and usercanvas data\n    var getImageUserCanvas = this.refs.userCanvasRef\n      .getBase64()\n      .then((usercanvas) => {\n        this.setState(\n          (prevState) => ({\n            ...prevState,\n            showAICanvas: true,\n            showInspireMode: false,\n            showUserCanvas: false,\n            userCanvasImageData: usercanvas,\n          }),\n          () => {\n            for (var i = 0; i < 2; i++) {\n              setTimeout(() => {\n                this.refs.drawCanvasRef.loadData(this.state.aiCanvasImageData);\n              }, 0);\n            }\n            this.refs.drawCanvasRef.loadData(this.state.aiCanvasImageData);\n          }\n        );\n\n        // Load the data base64\n      });\n  };\n\n  enableUserCanvas = () => {\n    if (this.state.showUserCanvas) {\n      return;\n    }\n\n    // Save the drawcanvas and usercanvas data\n    var getImageAICanvas = this.refs.drawCanvasRef\n      .getBase64()\n      .then((aicanvas) => {\n        this.setState(\n          (prevState) => ({\n            ...prevState,\n            showAICanvas: false,\n            showInspireMode: false,\n            showUserCanvas: true,\n            aiCanvasImageData: aicanvas,\n          }),\n          () => {\n            for (var i = 0; i < 2; i++) {\n              setTimeout(() => {\n                this.refs.userCanvasRef.loadData(\n                  this.state.userCanvasImageData\n                );\n              }, 0);\n            }\n          }\n        );\n        // Load the data base64\n      });\n  };\n\n  switchToAICanvas = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      currentBrush: brushTypes.AI,\n    }));\n    this.enableAICanvas();\n  }\n\n  switchToInspireMode = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      showInspireMode: true,\n      currentBrush: brushTypes.INSPIRE,\n    }));\n    // this.enableInspireMode();\n  }\n\n  switchToStyleBrush = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      currentBrush: brushTypes.STYLE,\n    }));\n    this.enableUserCanvas();\n  }\n\n  switchToFilterBrush = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      currentBrush: brushTypes.FILTER,\n    }));\n    this.enableUserCanvas();\n\n  }\n\n  switchToUserBrush = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      currentBrush: brushTypes.USER,\n    }));\n    // Display user canvas\n    this.enableUserCanvas();\n  }\n\n  render() {\n    let brushSlider = (\n      <View\n        style={{\n          backgroundColor: \"#f2f2eb\",\n          width: this.state.leftColumnWidth,\n          marginLeft: this.state.leftColumnLeftMargin,\n          borderRadius: 10,\n          flexDirection: \"column\",\n          padding: 5,\n        }}\n      >\n        <View>\n          <Text\n            style={{\n              textAlign: \"center\",\n              color: \"#363636\",\n              fontWeight: \"bold\",\n              fontSize: 16,\n              padding: 2,\n            }}\n          >\n            Size\n          </Text>\n        </View>\n\n        <Slider\n          style={{\n            width: device.height * 0.22,\n            margin: \"auto\",\n            height: device.height * 0.03,\n          }}\n          value={this.state.thickness}\n          minimumValue={1}\n          maximumValue={CANVASWIDTH / 4}\n          thumbTintColor=\"#4f4f4f\"\n          minimumTrackTintColor=\"#707070\"\n          maximumTrackTintColor=\"#cfcfcf\"\n          onValueChange={this.handleThickness}\n          onSlidingComplete={this.handleThicknessEnd}\n        />\n      </View>\n    );\n\n    // For ipad sizing\n    // prevent bouncing / scroll on ios\n    document.documentElement.style.height = \"100%\";\n    document.documentElement.style.overflow = \"hidden\";\n    document.body.style.height = \"100%\";\n    document.body.style.overflow = \"auto\";\n\n    return (\n      <View style={styles.container}>\n        {/* this View wraps the left column */}\n        <View\n          style={{\n            width: this.state.leftColumnLeftMargin + this.state.leftColumnWidth - 40,\n          }}\n        >\n          <TouchableOpacity\n            onPress={() => {\n              this.switchToAICanvas();\n            }}\n            disabled={this.state.disableButtons}\n          >\n            <Image\n              style={[\n                styles.brushes,\n                {\n                  height:\n                    this.state.currentBrush == brushTypes.AI\n                      ? device.height * 0.10\n                      : device.height * 0.08,\n                  width:\n                    this.state.currentBrush == brushTypes.AI\n                      ? device.height * 0.10 * 1.5\n                      : device.height * 0.08 * 1.5,\n                  opacity: this.state.currentBrush == brushTypes.AI ? 1 : 0.55,\n                },\n              ]}\n              source={require(\"./resources/AIBrush.png\")}\n            />\n          </TouchableOpacity>\n          <TouchableOpacity\n            onPress={() => {\n              this.switchToInspireMode();\n            }}\n            disabled={this.state.disableButtons}\n          >\n            <Image\n              style={[\n                styles.brushes,\n                {\n                  height:\n                    this.state.currentBrush == brushTypes.INSPIRE\n                      ? device.height * 0.10\n                      : device.height * 0.08,\n                  width:\n                    this.state.currentBrush == brushTypes.INSPIRE\n                      ? device.height * 0.10 * 1.5\n                      : device.height * 0.08 * 1.5,\n                  opacity: this.state.currentBrush == brushTypes.INSPIRE ? 1 : 0.55,\n                },\n              ]}\n              source={require(\"./resources/AIBrush.png\")}\n            />\n          </TouchableOpacity>\n          <TouchableOpacity\n            onPress={() => {\n              this.switchToStyleBrush();\n            }}\n            disabled={this.state.disableButtons}\n          >\n            <Image\n              style={[\n                styles.brushes,\n                {\n                  height:\n                    this.state.currentBrush == brushTypes.STYLE\n                      ? device.height * 0.10\n                      : device.height * 0.08,\n                  width:\n                    this.state.currentBrush == brushTypes.STYLE\n                      ? device.height * 0.10 * 1.5\n                      : device.height * 0.08 * 1.5,\n                  opacity:\n                    this.state.currentBrush == brushTypes.STYLE ? 1 : 0.55,\n                },\n              ]}\n              source={require(\"./resources/styleBrush.png\")}\n            />\n          </TouchableOpacity>\n          <TouchableOpacity\n            onPress={() => {\n              this.switchToFilterBrush();\n            }}\n            disabled={this.state.disableButtons}\n          >\n            <Image\n              style={[\n                styles.brushes,\n                {\n                  height:\n                    this.state.currentBrush == brushTypes.FILTER\n                      ? device.height * 0.10\n                      : device.height * 0.08,\n                  width:\n                    this.state.currentBrush == brushTypes.FILTER\n                      ? device.height * 0.10 * 1.5\n                      : device.height * 0.08 * 1.5,\n                  opacity:\n                    this.state.currentBrush == brushTypes.FILTER ? 1 : 0.55,\n                },\n              ]}\n              source={require(\"./resources/filterBrush.png\")}\n            />\n          </TouchableOpacity>\n          <TouchableOpacity\n            onPress={() => {\n              this.switchToUserBrush();\n            }}\n            disabled={this.state.disableButtons}\n          >\n            <Image\n              style={[\n                styles.brushes,\n                {\n                  height:\n                    this.state.currentBrush == brushTypes.USER\n                      ? device.height * 0.10\n                      : device.height * 0.08,\n                  width:\n                    this.state.currentBrush == brushTypes.USER\n                      ? device.height * 0.10 * 1.5\n                      : device.height * 0.08 * 1.5,\n                  opacity:\n                    this.state.currentBrush == brushTypes.USER ? 1 : 0.55,\n                },\n              ]}\n              source={require(\"./resources/userBrush.png\")}\n            />\n          </TouchableOpacity>\n\n          {this.state.currentBrush == brushTypes.AI && (\n            <View>{brushSlider}</View>\n          )}\n          {this.state.currentBrush == brushTypes.USER && (\n            <View>\n              <RgbaColorPicker\n                style={{\n                  marginLeft: this.state.leftColumnLeftMargin,\n                  marginBottom: 3,\n                  width: this.state.leftColumnWidth,\n                  height: this.state.leftColumnWidth,\n                }}\n                color={this.state.colorPickerDisplay}\n                onChange={(color) => {\n\n                  this.setState((prevState) => ({\n                    ...prevState,\n                    userBrushColor: this.rgbToHex(color),\n                    opacity: color.a,\n                    colorPickerDisplay: color,\n                  }));\n                  // sendSwitchUserBrush(this.state.socket,this.state.userBrushType,this.rgbToHex(color))\n\n                }}\n              />\n              {brushSlider}\n            </View>\n          )}\n          {/* Save painting button */}\n          {/* <View\n            style={{ padding: \"1em\", marginTop: \"10px\", marginBottom: \"10px\" }}\n          >\n            <Button\n              color=\"#717591\"\n              title=\"Save Painting\"\n              onPress={() => this.saveGeneratedImage()}\n            />\n          </View> */}\n        </View>\n\n        {/* this View wraps middle column */}\n        <View style={{ flexDirection: \"column\", display: this.state.currentBrush == brushTypes.INSPIRE ? \"none\" : \"block\" }} >\n          {/* this View wraps around the buttons that changes canva view & camera*/}\n          <View\n            style={{\n              flexDirection: \"row\",\n              paddingTop: device.height * 0.01,\n              alignContent: \"flex-end\",\n              marginLeft: \"auto\",\n            }}\n          ></View>\n\n          {/* this View wraps the two canvas */}\n          <View style={{ flexDirection: \"row\" }}>\n            {/* Canvas previews */}\n            {/* Show the user canvas if we are in the AI canvas main view */}\n            {this.state.showAICanvas && this.state.showPreview && (\n              <View\n                style={[\n                  styles.shadowBoxAICanvas,\n                  {\n                    width: this.state.USER_CANVASHEIGHT / 1.5,\n                    height: this.state.USER_CANVASHEIGHT / 1.5,\n                    marginRight: 5,\n                  },\n                ]}\n              >\n                <ImageBackground\n                  source={this.state.displayedImageData}\n                  style={{ filter: this.state.imageFilter }}\n                >\n                  <Image\n                    style={[\n                      {\n                        width: this.state.USER_CANVASHEIGHT / 1.5,\n                        height: this.state.USER_CANVASHEIGHT / 1.5,\n                      },\n                    ]}\n                    source={this.state.userCanvasImageData}\n                  />\n                </ImageBackground>\n              </View>\n            )}\n            {/* AI Brush preview */}\n            {!this.state.showAICanvas && this.state.showPreview && (\n              // {this.state.showUserCanvas && this.state.showPreview && (\n\n              <View\n                style={[\n                  styles.shadowBoxAICanvas,\n                  {\n                    width: this.state.USER_CANVASHEIGHT / 1.5,\n                    height: this.state.USER_CANVASHEIGHT / 1.5,\n                    marginRight: 5,\n                  },\n                ]}\n              >\n                <Image\n                  style={{\n                    width: this.state.USER_CANVASHEIGHT / 1.5,\n                    height: this.state.USER_CANVASHEIGHT / 1.5,\n                  }}\n                  source={this.state.aiCanvasImageData}\n                />\n              </View>\n            )}\n\n            {/* this wraps the middle big canvas and buttons */}\n            <View style={{ flexDirection: \"column\" }}>\n              {/* this View warps AI canvas */}\n              {this.state.showAICanvas && (\n                <View id=\"drawGroup\" style={styles.drawGroup}>\n                  <View\n                    style={[\n                      styles.shadowBoxAICanvas,\n                      {\n                        width: this.state.AI_CANVASWIDTH,\n                        height: this.state.AI_CANVASHEIGHT,\n                      },\n                    ]}\n                  >\n                    <DrawCanvas\n                      ref=\"drawCanvasRef\"\n                      setClickClear={(click) =>\n                        (this.clearChildAIBrush = click)\n                      }\n                      style={{\n                        backgroundColor: \"black\",\n                        position: \"absolute\",\n                        background: \"transparent\",\n                      }}\n                      brushType={this.state.currentBrush}\n                      thickness={this.state.thickness}\n                      color={this.state.color}\n                      // socket={this.state.socket}\n                      otherStrokes={this.state.collaboratorStroke}\n                      width={this.state.AI_CANVASWIDTH}\n                      height={this.state.AI_CANVASHEIGHT}\n                      opacity={1}\n                      disable={this.state.disableDrawing}\n                      isFirstLoadDrawCanvas={this.state.isFirstLoadDrawCanvas}\n                    />\n                  </View>\n                  \n                </View>\n              )}\n              {/* this View wraps generated image & user canvas */}\n              {this.state.showUserCanvas && (\n                <View id=\"drawGroup\" style={styles.drawGroup}>\n                  {/* Displayed image */}\n                  <View\n                    style={[\n                      styles.generatedImageBox,\n                      {\n                        width: this.state.USER_CANVASWIDTH,\n                        height: this.state.USER_CANVASHEIGHT,\n                      },\n                    ]}\n                  >\n                    {this.state.displayedImageData != null ? (\n                      <Image\n                        draggable={false}\n                        style={[\n                          styles.generatedImage,\n                          { filter: this.state.imageFilter },\n                        ]}\n                        source={{ uri: this.state.displayedImageData }}\n                      />\n                    ) : null}\n                  </View>\n                  {/* Main canvas */}\n                  {/* Conditionally render the main canvas if toggleDraw == true */}\n                  <View\n                    style={[\n                      styles.shadowBox,\n                      {\n                        width: this.state.USER_CANVASWIDTH,\n                        height: this.state.USER_CANVASHEIGHT,\n                      },\n                    ]}\n                  >\n                    {/* USER CANVAS */}\n                    <UserCanvas\n                      ref=\"userCanvasRef\"\n                      setClickClear={(click) =>\n                        (this.clearChildUserBrush = click)\n                      }\n                      style={{\n                        position: \"absolute\",\n                        background: \"transparent\",\n                      }}\n                      brushType={this.state.currentBrush}\n                      userBrushType={this.state.userBrushType}\n                      thickness={this.state.thickness}\n                      color={this.state.userBrushColor}\n                      // socket={this.state.socket}\n                      otherStrokes={this.state.collaboratorStroke}\n                      width={this.state.USER_CANVASWIDTH}\n                      height={this.state.USER_CANVASHEIGHT}\n                      opacity={this.state.opacity}\n                      disable={this.state.disableDrawing}\n                      id=\"myCanvas\"\n                    />\n                  </View>\n                </View>\n              )}\n\n              {/* this wraps the buttons at the bottom of canvas */}\n              {this.state.currentBrush == brushTypes.AI && (\n                <View\n                  style={{\n                    flexDirection: \"column\",\n                    justifyContent: \"space-around\",\n                  }}\n                >\n                  <TextInput\n                    style={{height: 40}}\n                    placeholder=\"Prompt...\"\n                    onChangeText={(text) => this.setState({text})}\n                    value={this.state.text}\n                  />\n                  <View style={{\n                    flexDirection: \"row\",\n                    justifyContent: \"space-around\",\n                  }}> \n                    <View style={{ padding: 5, width: \"20%\" }}>\n                      <Button\n                        style={{ marginTop: 10, height: \"80\" }}\n                        color=\"#5e748a\"\n                        title=\"clear\"\n                        onPress={() => this.clearChildAIBrush()}\n                      />\n                    </View>\n\n                    <View style={{ padding: 5, width: \"20%\" }}>\n                      <Button\n                        mode=\"contained\"\n                        style={{ padding: 10 }}\n                        onPress={this.grabPixelsGan.bind(this)}\n                        color=\"#88508c\"\n                        title=\"GauGAN\"\n                        disabled={this.state.isLoading}\n                      />\n                    </View>\n\n                    <View style={{ padding: 5, width: \"30%\" }}>\n                      <Button\n                        mode=\"contained\"\n                        style={{ padding: 10 }}\n                        onPress={this.grabPixelsSd.bind(this)}\n                        color=\"#88508c\"\n                        title=\"Stable Diffusion\"\n                        disabled={this.state.isLoading}\n                      />\n                    </View>\n\n                    <View style={{ padding: 5, width: \"25%\" }}>\n                      <Button\n                        mode=\"contained\"\n                        style={{ padding: 10 }}\n                        onPress={this.grabPixelsCN.bind(this)}\n                        color=\"#88508c\"\n                        title=\"Control Net\"\n                        disabled={this.state.isLoading}\n                      />\n                    </View>\n                  </View>\n                </View>\n              )}\n              {this.state.currentBrush == brushTypes.USER && (\n                <View\n                  style={{\n                    flexDirection: \"row\",\n                    justifyContent: \"space-around\",\n                  }}\n                >\n                  <View style={{ padding: 5, width: \"40%\" }}>\n                    <Button\n                      color=\"#717591\"\n                      title=\"clear strokes\"\n                      onPress={() => this.clearChildUserBrush()}\n                    />\n                  </View>\n                </View>\n              )}\n            </View>\n          </View>\n        </View>\n        \n        <View style={{ flexDirection: \"row\", display: this.state.currentBrush == brushTypes.INSPIRE ? \"block\" : \"none\", width: \"80%\" }}>\n            {/* {this.state.currentBrush == brushTypes.INSPIRE && ( */}\n              <View>\n                <InspireMode localurl={LOCALURL}>\n                </InspireMode>\n              </View>\n            {/* )} */}\n          </View>\n\n        {/* this View wraps the right column */}\n        <View style={{ flexDirection: \"row\" }}>\n          {/* AI brush palette buttons */}\n          {this.state.currentBrush == brushTypes.AI && (\n            <View style={styles.brushesContainer}>\n              <ScrollView>\n                {colorMap.colors.map((obj) => {\n                  return (\n                    <View style={{ margin: 2 }}>\n                      <TouchableOpacity\n                        style={{\n                          padding: 2,\n                          borderRadius: 5,\n                          backgroundColor: obj.color,\n                          borderWidth: this.state.color == obj.color ? 10 : 0,\n                          borderColor: \n                            obj.color == \"#efefef\" ? \"#d1d1d1\" : \"#f2f2eb\",\n\n                          // backgroundColor:\n                          //   this.state.color == obj.color\n                          //     ? \"#3d3d3d\"\n                          //     : \"#dbdbdb\", //obj.color == \"#efefef\" ? \"#dbdbdb\" : \"white\",\n                        }}\n                        onPress={() => {\n                          this.setState({ color: obj.color });\n                        }}\n                        disabled={this.state.disableButtons}\n                      >\n                        <Image\n                          draggable={false}\n                          style={styles.brushes}\n                          source={obj.logo}\n                        />\n                        <Text\n                          style={{\n                            fontSize: device.height * 0.012,\n                            color: obj.color == \"#efefef\" ? \"#3d3d3d\" : \"white\",\n\n                            // color:\n                            //   this.state.color == obj.color ? \"white\" : \"black\",\n                            // fontWeight: \"500\",\n                          }}\n                        >\n                          {obj.label}\n                        </Text>\n                      </TouchableOpacity>\n                    </View>\n                  );\n                })}\n              </ScrollView>\n\n              {/* Render the slider and the brush legend */}\n            </View>\n          )}\n\n          {/* Style buttons */}\n          {this.state.currentBrush == brushTypes.STYLE && (\n            <View style={styles.brushesContainer}>\n              <ScrollView>\n                {/* None style button */}\n                <View style={{ margin: 2 }}>\n                  <TouchableOpacity\n                    style={[\n                      styles.functionButton,\n                      {\n                        backgroundColor:\n                          this.state.styleBrushType == \"None\"\n                            ? \"#3d3d3d\"\n                            : \"#dbdbdb\",\n                      },\n                    ]}\n                    onPress={() => {\n                      this.setState((prevState) => ({\n                        ...prevState,\n                        displayedImageData: this.state.generatedImageData,\n                        styleBrushType: \"None\",\n                      }));\n                    }}\n                    disabled={this.state.disableButtons}\n                  >\n                    <Image\n                      style={styles.brushes}\n                      source={require(\"./resources/none_style.png\")}\n                    />\n                    <Text\n                      style={{\n                        color:\n                          this.state.styleBrushType == \"None\"\n                            ? \"white\"\n                            : \"black\",\n                        fontSize: device.height * 0.015,\n                        fontWeight: \"500\",\n                      }}\n                    >\n                      {\" \"}\n                      None{\" \"}\n                    </Text>\n                  </TouchableOpacity>\n                </View>\n                {/* Programmatically render all style options */}\n                {styleTransferOptions.styles.map((obj) => {\n                  return (\n                    <View style={{ margin: 2 }}>\n                      <TouchableOpacity\n                        disabled={this.state.disableButtons}\n                        style={[\n                          styles.functionButton,\n                          {\n                            backgroundColor:\n                              this.state.styleBrushType == obj.name\n                                ? \"#3d3d3d\"\n                                : \"#dbdbdb\",\n                          },\n                        ]}\n                        onPress={() => {\n                          this.sendRequestStyleHelper(obj.name);\n                          this.setState((prevState) => ({\n                            styleBrushType: obj.name,\n                          }));\n                        }}\n                      >\n                        <Image style={styles.brushes} source={obj.image_url} />\n                        <Text\n                          style={{\n                            color:\n                              this.state.styleBrushType == obj.name\n                                ? \"white\"\n                                : \"black\",\n                            fontSize: device.height * 0.015,\n                            fontWeight: \"500\",\n                          }}\n                        >\n                          {obj.label}\n                        </Text>\n                      </TouchableOpacity>\n                    </View>\n                  );\n                })}\n              </ScrollView>\n            </View>\n          )}\n\n          {/* Filter buttons */}\n          {this.state.currentBrush == brushTypes.FILTER && (\n            <View style={styles.brushesContainer}>\n              <ScrollView>\n                {/* None filter button */}\n                <View style={{ margin: 2 }}>\n                  <TouchableOpacity\n                    style={[\n                      styles.functionButton,\n                      {\n                        backgroundColor:\n                          this.state.filterBrushType == \"None\"\n                            ? \"#3d3d3d\"\n                            : \"#dbdbdb\",\n                      },\n                    ]}\n                    onPress={() => {\n                      this.setState((prevState) => ({\n                        ...prevState,\n                        imageFilter: \"\",\n                        filterBrushType: \"None\",\n                      }));\n                      // sendSwitchFilter(this.state.socket, \"\", \"None\")\n                    }}\n                    disabled={this.state.disableButtons}\n                  >\n                    <Image\n                      style={styles.brushes}\n                      source={require(\"./resources/none_style.png\")}\n                    />\n                    <Text\n                      style={{\n                        color:\n                          this.state.filterBrushType == \"None\"\n                            ? \"white\"\n                            : \"black\",\n                        fontSize: device.height * 0.015,\n                        fontWeight: \"500\",\n                      }}\n                    >\n                      {\" \"}\n                      None{\" \"}\n                    </Text>\n                  </TouchableOpacity>\n                </View>\n                {/* Programmatically render all filter options */}\n                {filterOptions.filters.map((obj) => {\n                  return (\n                    <View style={{ margin: 2 }}>\n                      <TouchableOpacity\n                        disabled={this.state.disableButtons}\n                        style={[\n                          styles.functionButton,\n                          {\n                            backgroundColor:\n                              this.state.filterBrushType == obj.name\n                                ? \"#3d3d3d\"\n                                : \"#dbdbdb\",\n                          },\n                        ]}\n                        onPress={() => {\n                          this.setState((prevState) => ({\n                            imageFilter: obj.filter,\n                            filterBrushType: obj.name,\n                          }));\n                          // sendSwitchFilter(this.state.socket, obj.filter, obj.name)\n                        }}\n                      >\n                        <Image style={styles.brushes} source={obj.image_url} />\n                        <Text\n                          style={{\n                            color:\n                              this.state.filterBrushType == obj.name\n                                ? \"white\"\n                                : \"black\",\n                            fontSize: device.height * 0.015,\n                            fontWeight: \"500\",\n                          }}\n                        >\n                          {obj.label}\n                        </Text>\n                      </TouchableOpacity>\n                    </View>\n                  );\n                })}\n              </ScrollView>\n            </View>\n          )}\n        </View>\n\n        {/* User Brush buttons */}\n        {this.state.currentBrush == brushTypes.USER && (\n          <View style={styles.brushesContainer}>\n            {/* <View style={{ height: device.height * 0.4 }}> */}\n            <ScrollView>\n              {/* Programmatically render all options */}\n              {userBrushesOptions.userBrushes.map((obj) => {\n                return (\n                  <View style={{ margin: 2 }}>\n                    <TouchableOpacity\n                      style={[\n                        styles.functionButton,\n                        {\n                          backgroundColor:\n                            this.state.userBrushType == obj.name\n                              ? \"#3d3d3d\"\n                              : \"white\",\n                        },\n                      ]}\n                      onPress={() => {\n                        this.setState((prevState) => ({\n                          ...prevState,\n                          userBrushType: obj.name,\n                        }));\n                        // sendSwitchUserBrush(this.state.socket,obj.name,this.state.userBrushColor)\n                      }}\n                    >\n                      <Image\n                        style={styles.userBrushes}\n                        source={obj.image_url}\n                      />\n                      <Text\n                        style={{\n                          color:\n                            this.state.userBrushType == obj.name\n                              ? \"white\"\n                              : \"#2e2e2e\",\n                          fontSize: device.height * 0.015,\n                        }}\n                      >\n                        {obj.label}\n                      </Text>\n                    </TouchableOpacity>\n                  </View>\n                );\n              })}\n            </ScrollView>\n            {/* </View> */}\n          </View>\n        )}\n\n        {/* this View wraps the spinner */}\n        {/* Spinner is recommended to be at the root level */}\n        <View style={styles.spinnerContainer}>\n          <ActivityIndicator\n            animating={this.state.isLoading}\n            size={\"large\"}\n            color={\"#545454\"}\n            style={{ transform: [{ scale: 3 }] }}\n          />\n        </View>\n\n        {/* this View wraps the size indicator */}\n        {this.state.isChangeSize == true && (\n          <View style={styles.circleContainer}>\n            <Text style={{ color: \"#4d4d4d\", fontWeight: \"bold\" }}>\n              Size Preview:\n            </Text>\n            <Ionicons\n              style={{\n                opacity: this.state.opacity,\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                margin: \"auto\",\n              }}\n              name=\"ellipse\"\n              color={\n                this.state.currentBrush == brushTypes.USER\n                  ? this.state.userBrushColor\n                  : this.state.color\n              }\n              size={this.state.thickness * 1.2}\n            ></Ionicons>\n          </View>\n        )}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    backgroundColor: \"white\",\n  },\n  generatedImageBox: {\n    userDrag: \"none\",\n    userSelect: \"none\",\n    backgroundColor: \"transparent\",\n    position: \"absolute\",\n  },\n  generatedImage: {\n    width: \"100%\",\n    height: \"100%\",\n    userDrag: \"none\",\n    userSelect: \"none\",\n  },\n  shadowBoxAICanvas: {\n    shadowColor: \"grey\",\n    shadowRadius: 20,\n    position: \"relative\",\n  },\n  shadowBox: {\n    shadowColor: \"grey\",\n    shadowRadius: 20,\n    position: \"relative\",\n  },\n  functionButton: {\n    padding: 4,\n    borderRadius: 5,\n  },\n\n  drawGroup: {\n    flexDirection: \"row\",\n    // alignItems: \"center\",\n    // justifyContent: \"center\",\n  },\n  strokeGroup: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  toolGroup: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n  brushes: {\n    margin: 0,\n    height: device.height * 0.06,\n    width: device.height * 0.06 * 1.8,\n    padding: 0,\n    userDrag: \"none\",\n    userSelect: \"none\",\n  },\n  donwloadButton: {\n    margin: 0,\n    height: device.height * 0.145 * 0.4,\n    width: device.height * 0.145 * 0.41,\n    padding: 0,\n    userDrag: \"none\",\n    userSelect: \"none\",\n  },\n  brushesContainer: {\n    flexDirection: \"column\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    height: device.height,\n    borderLeftColor: \"#C8C8C8\",\n    backgroundColor: \"#f2f2eb\",\n    borderLeftWidth: 3,\n  },\n  userBrushes: {\n    justifyContent: \"start\",\n    margin: 0,\n    height: device.height * 0.06,\n    width: device.height * 0.06 * 1.8,\n    paddingTop: 0,\n  },\n  spinnerTextStyle: {\n    color: \"transparent\",\n  },\n  spinnerContainer: {\n    position: \"absolute\",\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"transparent\",\n    left: device.width / 2,\n    top: device.height / 2.5,\n  },\n  circleContainer: {\n    height: device.height * 0.35,\n    width: device.height * 0.3,\n    marginBottom: \"0.5em\",\n    position: \"absolute\",\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"rgba(245, 245, 237, 0.8)\",\n    borderRadius: 10,\n    left: device.width / 2,\n    top: device.height / 3,\n  },\n\n  swatch: {\n    padding: \"5px\",\n    background: \"#fff\",\n    borderRadius: \"1px\",\n    boxShadow: \"0 0 0 1px rgba(0,0,0,.1)\",\n    display: \"inline-block\",\n    cursor: \"pointer\",\n  },\n  popover: {\n    position: \"absolute\",\n    zIndex: \"2\",\n  },\n  cover: {\n    position: \"fixed\",\n    top: \"0px\",\n    right: \"0px\",\n    bottom: \"0px\",\n    left: \"0px\",\n  },\n  color: {\n    width: \"36px\",\n    height: \"14px\",\n    borderRadius: \"2px\",\n  },\n  Cat: {\n    color: \"pink\",\n    backgroundColor: \"pink\",\n  },\n});\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}