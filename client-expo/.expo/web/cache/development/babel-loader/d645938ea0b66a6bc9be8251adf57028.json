{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/mnt/427bdd3d-17db-4d44-b722-f3e4fd35d808/projects/gauGAN/hai-art/client-expo/components/DrawCanvas.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Canvas, { Image as CanvasImage } from 'react-native-canvas';\nimport { generateStyle } from \"../styles/styles\";\nimport Point from \"../classes/Point\";\nimport { sendStroke, sendStrokeEnd, sendStrokeStart } from \"../api/websocketApi.js\";\nvar device = Dimensions.get('window');\nvar styles = StyleSheet.create(generateStyle(device));\n\nvar DrawCanvas = function (_Component) {\n  _inherits(DrawCanvas, _Component);\n\n  var _super = _createSuper(DrawCanvas);\n\n  function DrawCanvas(props) {\n    var _this;\n\n    _classCallCheck(this, DrawCanvas);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      strokes: []\n    };\n\n    _this.onDrawMove = function (event) {\n      var posX = event.nativeEvent.locationX;\n      var posY = event.nativeEvent.locationY;\n      var p = new Point(posX, posY, _this.props.thickness, _this.props.color, \"move\");\n\n      _this.updateCanvas(p, \"self\");\n\n      _this.setState({\n        strokes: _this.state.strokes.concat(p)\n      });\n\n      sendStroke(_this.props.socket, {\n        x: posX,\n        y: posY\n      }, _this.props.color, _this.props.thickness);\n    };\n\n    _this.onDrawStart = function (event) {\n      var posX = event.nativeEvent.locationX;\n      var posY = event.nativeEvent.locationY;\n      var p = new Point(posX, posY, _this.props.thickness, _this.props.color, \"start\");\n\n      _this.updateCanvas(p, \"self\");\n\n      _this.setState({\n        strokes: _this.state.strokes.concat(p)\n      });\n\n      sendStrokeStart(_this.props.socket, {\n        x: p.x,\n        y: p.y\n      }, p.thickness, p.color);\n    };\n\n    _this.onDrawEnd = function (event) {\n      var posX = event.nativeEvent.locationX;\n      var posY = event.nativeEvent.locationY;\n      var p = new Point(posX, posY, _this.props.thickness, _this.props.color, \"end\");\n\n      _this.updateCanvas(p, \"self\");\n\n      _this.setState({\n        strokes: _this.state.strokes.concat(p)\n      });\n\n      sendStrokeEnd(_this.props.socket, _this.props.color, _this.props.thickness);\n    };\n\n    _this.updateCanvas = function (point, client) {\n      if (!_this.canvasRef) {\n        return;\n      }\n\n      var strokes;\n\n      if (client == \"self\") {\n        strokes = _this.state.strokes;\n      } else {\n        strokes = _this.props.otherStrokes;\n      }\n\n      if (!strokes || strokes.length == 0) {\n        return;\n      }\n\n      var canvas = _this.canvasRef.current;\n      var len = strokes.length;\n\n      if (canvas && len > 0) {\n        var lastPoint = strokes[len - 1];\n        var x = point.x,\n            y = point.y,\n            type = point.type,\n            thickness = point.thickness;\n        var ctx = canvas.getContext(\"2d\");\n        ctx.lineWidth = thickness;\n\n        switch (type) {\n          case \"start\":\n            ctx.moveTo(x, y);\n            ctx.beginPath();\n            ctx.lineTo(x, y);\n            break;\n\n          case \"end\":\n            break;\n\n          case \"move\":\n            ctx.beginPath();\n            ctx.moveTo(lastPoint.x, lastPoint.y);\n            ctx.globalCompositeOperation = 'source-over';\n            ctx.lineTo(x, y);\n            break;\n        }\n\n        ctx.fillStyle = point.color;\n        ctx.strokeStyle = point.color;\n        ctx.lineJoin = ctx.lineCap = 'round';\n        ctx.closePath();\n        ctx.stroke();\n      }\n    };\n\n    _this.handleCanvas = function (canvas) {\n      var ctx = canvas.getContext('2d');\n      canvas.width = device.width * 0.45;\n      canvas.height = device.height * 0.85;\n      _this.canvasRef = canvas;\n      _this.canvasRef.current = canvas;\n    };\n\n    _this.getPathData = function (x, y, width, color) {\n      return {\n        drawer: null,\n        size: {\n          width: _this.canvas._size.width,\n          height: _this.canvas._size.height\n        },\n        path: {\n          data: [x.toString() + \",\" + y.toString()],\n          width: width,\n          color: color,\n          id: parseInt(Math.random() * 100000000)\n        }\n      };\n    };\n\n    _this.getPathDataArray = function (data, width, color) {\n      parsedArr = [];\n\n      for (var i = 0; i < data.length; i++) {\n        parsedArr.push(data[i].x + \",\" + data[i].y);\n      }\n\n      return {\n        drawer: null,\n        size: {\n          width: _this.canvas._size.width,\n          height: _this.canvas._size.height\n        },\n        path: {\n          data: parsedArr,\n          width: width,\n          color: color,\n          id: parseInt(Math.random() * 100000000)\n        }\n      };\n    };\n\n    _this.getBase64 = function _callee() {\n      var canvas, ret;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              canvas = _this.canvasRef.current;\n              console.log(\"Getting bsea64\");\n              console.log(\"Getting base64 is\", canvas.toDataURL());\n              ret = canvas.toDataURL();\n\n              if (!(typeof ret == \"string\")) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\", Promise.resolve(ret));\n\n            case 8:\n              return _context.abrupt(\"return\", ret);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.onStrokeChangeHandler = function (x, y) {\n      sendStroke(_this.props.socket, {\n        x: x,\n        y: y\n      }, _this.props.color, _this.props.thickness);\n    };\n\n    _this.onStrokeEndHandler = function () {\n      sendStrokeEnd(_this.props.socket, _this.props.color, _this.props.thickness);\n    };\n\n    _this.onStrokeStartHandler = function (x, y) {\n      sendStrokeStart(_this.props.socket);\n    };\n\n    _this.handleCanvas = _this.handleCanvas.bind(_assertThisInitialized(_this));\n    _this.thickness = props.thickness;\n    _this.color = props.color;\n    _this.canvasRef = null;\n    return _this;\n  }\n\n  _createClass(DrawCanvas, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.otherStrokes != this.props.otherStrokes) {\n        console.log(\"collaborator\", prevProps.otherStrokes, \"new:\", this.props.otherStrokes);\n\n        if (this.props.otherStrokes.length > 0) {\n          var newStroke = this.props.otherStrokes[this.props.otherStrokes.length - 1];\n          var pt = new Point(newStroke.x, newStroke.y, newStroke.thickness, newStroke.color, \"move\");\n          this.updateCanvas(pt, \"other\");\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS === \"web\") {\n        return React.createElement(View, {\n          style: styles.drawBoxInner,\n          onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n            return true;\n          },\n          onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {\n            return true;\n          },\n          onResponderStart: this.onDrawStart,\n          onResponderMove: this.onDrawMove,\n          onResponderRelease: this.onDrawEnd,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 3\n          }\n        }, React.createElement(\"canvas\", {\n          style: {\n            \"borderColor\": \"black\"\n          },\n          ref: this.handleCanvas,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 9\n          }\n        }));\n      } else {\n        return React.createElement(View, {\n          onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n            return true;\n          },\n          onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {\n            return true;\n          },\n          onResponderStart: this.onDrawStart,\n          onResponderMove: this.onDrawMove,\n          onResponderRelease: this.onDrawEnd,\n          style: styles.drawBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 4\n          }\n        }, React.createElement(Canvas, {\n          width: styles.drawBox.width,\n          height: styles.drawBox.height,\n          ref: this.handleCanvas,\n          socket: socket,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 4\n          }\n        }));\n      }\n    }\n  }]);\n\n  return DrawCanvas;\n}(Component);\n\nexport { DrawCanvas as default };","map":{"version":3,"sources":["/mnt/427bdd3d-17db-4d44-b722-f3e4fd35d808/projects/gauGAN/hai-art/client-expo/components/DrawCanvas.js"],"names":["React","Component","useRef","Canvas","Image","CanvasImage","generateStyle","Point","sendStroke","sendStrokeEnd","sendStrokeStart","device","Dimensions","get","styles","StyleSheet","create","DrawCanvas","props","state","strokes","onDrawMove","event","posX","nativeEvent","locationX","posY","locationY","p","thickness","color","updateCanvas","setState","concat","socket","x","y","onDrawStart","onDrawEnd","point","client","canvasRef","otherStrokes","length","canvas","current","len","lastPoint","type","ctx","getContext","lineWidth","moveTo","beginPath","lineTo","globalCompositeOperation","fillStyle","strokeStyle","lineJoin","lineCap","closePath","stroke","handleCanvas","width","height","getPathData","drawer","size","_size","path","data","toString","id","parseInt","Math","random","getPathDataArray","parsedArr","i","push","getBase64","console","log","toDataURL","ret","Promise","resolve","onStrokeChangeHandler","onStrokeEndHandler","onStrokeStartHandler","bind","prevProps","newStroke","pt","Platform","OS","drawBoxInner","drawBox"],"mappings":"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","sourcesContent":["import React, { Component, useRef } from 'react';\nimport {Text, View, Platform, StyleSheet, Dimensions} from 'react-native';\nimport Canvas, {Image as CanvasImage} from 'react-native-canvas';\nimport { generateStyle } from '../styles/styles';\nimport Point from \"../classes/Point\";\nimport {\n\tsendStroke,\n\tsendStrokeEnd,\n\tsendStrokeStart,\n  } from '../api/websocketApi.js';\n  \nvar device = Dimensions.get('window');\n\n\nconst styles = StyleSheet.create(generateStyle(device));\n\n\n\nexport default class DrawCanvas extends Component {\n\n\n\tstate = {\n\t\tstrokes: []\n\t}\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleCanvas = this.handleCanvas.bind(this);\n\t\tthis.thickness = props.thickness\n\t\tthis.color = props.color\n\t\tthis.canvasRef = null;\n\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.otherStrokes != this.props.otherStrokes) {\n\t\t  console.log(\"collaborator\", prevProps.otherStrokes, \"new:\", this.props.otherStrokes)\n\t\t\tif (this.props.otherStrokes.length > 0) {\n\t\t\t\tvar newStroke = this.props.otherStrokes[this.props.otherStrokes.length-1]\n\t\t\t\tvar pt = new Point(newStroke.x, newStroke.y, newStroke.thickness, newStroke.color,  \"move\")\n\t\t\t\tthis.updateCanvas(pt, \"other\")\t\t\n\t\t\t}\n\t\t}\n\t}\t  \n\t\n    onDrawMove = (event) => {\n\t\t// console.log(event.nativeEvent)\n        // console.log(\"hello\");\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\tvar p = new Point(posX, posY, this.props.thickness, this.props.color, \"move\")\n\t\tthis.updateCanvas(p, \"self\")\n\n\t\t// Create stroke move object\n\t\tthis.setState({\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t})\n\t\tsendStroke(this.props.socket, {x: posX, y: posY}, this.props.color, this.props.thickness)\n\t\t\n    }\n\n\tonDrawStart = (event) => {\n\t\t// console.log(\"Got start event:\", event)\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\t// Create stroke move object\n\t\tvar p = new Point(posX, posY, this.props.thickness, this.props.color, \"start\")\n\t\tthis.updateCanvas(p, \"self\")\n\n\t\tthis.setState({\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t} )\n\t\t// socket: start stroke\n\t\tsendStrokeStart(this.props.socket, {x: p.x, y: p.y}, p.thickness, p.color);\n\n\t}\n\n\tonDrawEnd = (event) => {\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\t// Create stroke move object\n\t\tvar p = new Point(posX, posY, this.props.thickness, this.props.color,  \"end\")\n\t\tthis.updateCanvas(p, \"self\")\n\n\t\tthis.setState({\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t})\n\t\t// socket: end stroke\n\t\tsendStrokeEnd(this.props.socket, this.props.color, this.props.thickness);\n\t}\n\n\tupdateCanvas = (point, client) => {\n\n\t\t// draw a point\n\t\t// console.log(\"canvas ref in update is\", this.canvasRef)\n\t\tif (!this.canvasRef) {\n\t\t\treturn;\n\t\t}\n\t\tvar strokes;\n\t\tif (client == \"self\") {\n\t\t\tstrokes = this.state.strokes\n\t\t}\n\t\telse {\n\t\t\tstrokes = this.props.otherStrokes\n\t\t}\n\t\tif (!strokes || strokes.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tvar canvas = this.canvasRef.current\n\t\tvar len = strokes.length\n\t\t// console.log(\"canvas is\", canvas == null)\n\n\t\tif (canvas && len > 0) {\n\t\t\tvar lastPoint = strokes[len-1]\n\t\t\tvar {x, y, type, thickness} = point\n\t\t\t// console.log(\"thickness is\", x, y, type, thickness)\n\t\t\tvar ctx = canvas.getContext(\"2d\");\n\t\t\tctx.lineWidth = thickness\n\n\t\t\tswitch (type) {\n\t\t\t\tcase \"start\":\n\t\t\t\t\tctx.moveTo(x, y)\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.lineTo(x, y);\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"end\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"move\":\n\t\t\t\t\tctx.beginPath();\n\n\t\t\t\t\tctx.moveTo(lastPoint.x, lastPoint.y)\n\t\t\t\t\tctx.globalCompositeOperation = 'source-over';\n\t\t\t\t\tctx.lineTo(x, y);\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\t\t\tctx.fillStyle = point.color;\n\t\t\tctx.strokeStyle = point.color;\n\t\t\tctx.lineJoin = ctx.lineCap = 'round';\n\t\t\tctx.closePath()\n\t\t\tctx.stroke();\t\t\t\n\n\t\t}\n\n\t}\n\n\thandleCanvas = (canvas) => {\n\t\t// console.log(\"handling canvas\", canvas)\n\n\t\tconst ctx = canvas.getContext('2d');\n\t\tcanvas.width = device.width * 0.45;\n\t\tcanvas.height = device.height * 0.85;\n\n\t\tthis.canvasRef = canvas;\n\t\tthis.canvasRef.current = canvas;\n\n\t}\n\n\n\tgetPathData = (x, y, width, color) => {\n\t\treturn {\n\t\t  drawer: null,\n\t\t  size: {\n\t\t\twidth: this.canvas._size.width,\n\t\t\theight: this.canvas._size.height,\n\t\t  },\n\t\t  path: {\n\t\t\tdata: [`${x.toString()},${y.toString()}`],\n\t\t\t// eslint-disable-next-line radix\n\t\t\twidth: width,\n\t\t\tcolor: color,\n\t\t\tid: parseInt(Math.random() * 100000000),\n\t\t  },\n\t\t};\n\t  };\n\t\n\t  getPathDataArray = (data, width, color) => {\n\t\tparsedArr = [];\n\t\tfor (var i = 0; i < data.length; i++) {\n\t\t  parsedArr.push(`${data[i].x},${data[i].y}`);\n\t\t}\n\t\treturn {\n\t\t  drawer: null,\n\t\t  size: {\n\t\t\twidth: this.canvas._size.width,\n\t\t\theight: this.canvas._size.height,\n\t\t  },\n\t\t  path: {\n\t\t\tdata: parsedArr,\n\t\t\t// eslint-disable-next-line radix\n\t\t\twidth: width,\n\t\t\tcolor: color,\n\t\t\tid: parseInt(Math.random() * 100000000),\n\t\t  },\n\t\t};\n\t  };\n\n\tgetBase64 = async () => {\n\t\tvar canvas = this.canvasRef.current\n\t\tconsole.log(\"Getting bsea64\");\n\t\tconsole.log(\"Getting base64 is\", canvas.toDataURL());\n\n\t\t// toDataURL is a string on web, and a promise on android/ios\n\t\tvar ret = canvas.toDataURL() \n\n\t\t// web\n\t\tif (typeof(ret) == \"string\") {\n\t\t\treturn Promise.resolve(ret)\n\t\t// android/ios\n\t\t} else {\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t// Send stroke point data\n\tonStrokeChangeHandler = (x, y) => {\n\t\tsendStroke(this.props.socket, {x: x, y: y}, this.props.color, this.props.thickness);\n\t};\n\n\t// Send stroke end signal\n\tonStrokeEndHandler = () => {\n\t\tsendStrokeEnd(this.props.socket, this.props.color, this.props.thickness);\n\t};\n\tonStrokeStartHandler = (x, y) => {\n\t\tsendStrokeStart(this.props.socket);\n\t};\n   \n    render() {\n      if (Platform.OS === \"web\") {\n\t\treturn (\n\t\t<View\n\t\tstyle= {styles.drawBoxInner}\n\t\tonStartShouldSetResponder={(event) => {return true;}}\n\t\tonMoveShouldSetResponder={(event) => {return true;}}\n\t\tonResponderStart={this.onDrawStart}\n\t\tonResponderMove={this.onDrawMove}\n\t\tonResponderRelease={this.onDrawEnd}\n\t\t>\n        <canvas style={{\"borderColor\":\"black\"}} ref={this.handleCanvas}  />\n\t\t</View>\n\t\t)\n\t} else {\n\t\treturn (\n\t\t\t<View\n\t\t\tonStartShouldSetResponder={(event) => {return true;}}\n\t\t\tonMoveShouldSetResponder={(event) => {return true;}}\n\t\t\tonResponderStart={this.onDrawStart}\n\t\t\tonResponderMove={this.onDrawMove}\n\t\t\tonResponderRelease={this.onDrawEnd}\n\t\t\tstyle= {styles.drawBox}\n\t\t\t>\n\t\t\t<Canvas width={styles.drawBox.width}\n\t\t\t\t\theight={styles.drawBox.height} \n\t\t\t\t\tref={this.handleCanvas} \n\t\t\t\t\tsocket={socket}\n\t\t\t/>\n\t\t\t</View>\n\t\t)\n\t}\n    }\n  }\n\n"]},"metadata":{},"sourceType":"module"}