{"version":3,"sources":["styles/styles.js","classes/Point.js","components/DrawCanvas.js","App.js","index.js"],"names":["generateStyle","device","container","flex","flexDirection","alignItems","justifyContent","backgroundColor","drawBox","borderColor","borderWidth","padding","width","height","canvasBox","generatedImageBox","aspectRatio","generatedImage","functionButton","borderRadius","Point","x","y","thickness","type","this","Dimensions","get","styles","StyleSheet","create","DrawCanvas","props","state","strokes","onDrawMove","event","posX","nativeEvent","locationX","posY","locationY","p","updateCanvas","setState","concat","onDrawStart","console","log","onDrawEnd","point","canvasRef","canvas","current","len","length","lastPoint","ctx","getContext","lineWidth","moveTo","beginPath","lineTo","globalCompositeOperation","fillStyle","strokeStyle","lineJoin","lineCap","closePath","stroke","handleCanvas","bind","Platform","OS","View","style","onTouchMove","ref","onTouchStart","onTouchEnd","Component","App","imageData","generatedImageData","stylizedImageData","displayedImageData","color","handleThickness","sliderValue","prevState","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","onSlidingComplete","registerRootComponent"],"mappings":"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","file":"static/js/app.24f8921d.chunk.js","sourcesContent":["import { autocrop } from \"jimp\";\n\nexport function generateStyle(device) {\n  return {\n    container: {\n      flex: 1,\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: 'skyblue',\n    },\n\n    drawBox: {\n      backgroundColor: 'lightblue',\n      borderColor: 'lightblue',\n      borderWidth: 2,\n      padding: 10,\n      width: device.width * 0.75,\n      height: device.width * 0.75,\n\n    },\n    canvasBox: {\n      width: device.width * 0.75,\n      height: device.width * 0.75,\n    },\n    generatedImageBox: {\n      aspectRatio: 1,\n      borderWidth: 10,\n      borderColor: 'lightblue',\n\n      width: device.width * 0.6,\n      height: device.width * 0.6,\n    },\n    generatedImage: {\n      width: device.width * 0.6,\n      height: device.width * 0.6,\n    },\n    functionButton: {\n      padding: 4,\n      borderRadius: 5,\n    },\n  };\n}\n","export default class Point {\n    constructor(x, y, thickness, type) {\n      this.x = x;\n      this.y = y;\n      this.thickness = thickness;\n      this.type = type;\n    }\n  }","import React, { Component, useRef } from 'react';\nimport {Text, View, Platform, StyleSheet, Dimensions} from 'react-native';\nimport Canvas, {Image as CanvasImage} from 'react-native-canvas';\nimport { generateStyle } from '../styles/styles';\nimport Point from \"../classes/Point\";\n\nvar device = Dimensions.get('window');\n\n\nconst styles = StyleSheet.create(generateStyle(device));\n\nexport default class DrawCanvas extends Component {\n\n\n\tstate = {\n\t\tstrokes: []\n\t}\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleCanvas = this.handleCanvas.bind(this);\n\t\tthis.thickness = props.thickness\n\t\tthis.canvasRef = null;\n\n\t  }\n\t\n    onDrawMove = (event) => {\n\t\t// console.log(event.nativeEvent)\n        // console.log(\"hello\");\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\tvar p = new Point(posX, posY, this.props.thickness, \"move\")\n\t\tthis.updateCanvas(p)\n\n\t\t// Create stroke move object\n\t\tthis.setState({\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t})\n\n\t\t\n    }\n\n\tonDrawStart = (event) => {\n\t\tconsole.log(\"Got start\")\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\t// Create stroke move object\n\t\tvar p = new Point(posX, posY, this.props.thickness, \"start\")\n\t\tthis.updateCanvas(p)\n\n\t\tthis.setState({\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t} )\n\n\t}\n\n\tonDrawEnd = (event) => {\n\t\tvar posX = event.nativeEvent.locationX\n\t\tvar posY = event.nativeEvent.locationY\n\n\t\t// Create stroke move object\n\t\tvar p = new Point(posX, posY, this.props.thickness, \"end\")\n\t\tthis.updateCanvas(p)\n\n\t\tthis.setState({\n\t\t\tstrokes: this.state.strokes.concat(p)\n\t\t} )\n\t}\n\n\tupdateCanvas = (point) => {\n\t// draw a point\n\t\tif (!this.canvasRef) {\n\t\t\treturn;\n\t\t}\n\t\tvar canvas = this.canvasRef.current\n\t\tvar len = this.state.strokes.length\n\t\tconsole.log(\"canvas is\", canvas == null)\n\n\t\tif (canvas && len > 0) {\n\t\t\tvar lastPoint = this.state.strokes[len-1]\n\t\t\tvar secondLastPoint = this.state.strokes[len-2]\n\t\t\tvar {x, y, type, thickness} = point\n\t\t\tconsole.log(\"thickness is\", thickness)\n\t\t\tvar ctx = canvas.getContext(\"2d\");\n\t\t\tctx.lineWidth = thickness\n\n\t\t\tswitch (type) {\n\t\t\t\tcase \"start\":\n\t\t\t\t\tctx.moveTo(x, y)\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.lineTo(x, y);\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"end\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"move\":\n\t\t\t\t\tctx.beginPath();\n\n\t\t\t\t\tctx.moveTo(lastPoint.x, lastPoint.y)\n\t\t\t\t\tctx.globalCompositeOperation = 'source-over';\n\t\t\t\t\tctx.lineTo(x, y);\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tctx.fillStyle = 'black';\n\t\t\tctx.strokeStyle = 'black';\n\t\t\tctx.lineJoin = ctx.lineCap = 'round';\n\t\t\tctx.closePath()\n\t\t\tctx.stroke();\t\t\t\n\n\t\t}\n\n\t}\n\n\thandleCanvas = (canvas) => {\n\t\tconsole.log(\"handling canvas\", canvas)\n\n\t\tconst ctx = canvas.getContext('2d');\n\t\tcanvas.width = styles.drawBox.width;\n\t\tcanvas.height = styles.drawBox.height;\n\n\t\tthis.canvasRef = canvas;\n\t\tthis.canvasRef.current = canvas;\n\n\t}\n   \n    render() {\n      if (Platform.OS === \"web\") {\n\t\t<View\n\t\tstyle= {styles.drawBox}\n\t\tonTouchMove={this.onDrawMove}>\n\t\tonTouchStart={this.onDrawStart}\n\t\tonTouchEnd={this.onDrawEnd}\n      \tonClick={this.onDrawStart}\n\t\t>\n\t\n\n        <canvas style={{\"borderWidth\": 20, \"border\":\"black\"}} width={styles.drawBox.width} height={styles.drawBox.height} ref={this.handleCanvas} />\n\t\t</View>\n\t}\n    \n    return (\n\t\t<View\n\t\tonTouchMove={this.onDrawMove}\n\t\tonTouchStart={this.onDrawStart}\n\t\tonTouchEnd={this.onDrawEnd}\n\t\tstyle= {styles.drawBox}\n\t\t>\n        <Canvas style={{\"borderWidth\": 20}}width={styles.drawBox.width} height={styles.drawBox.height} ref={this.handleCanvas} />\n\t\t</View>\n    )\n    }\n   \n    \n  }\n\n","import React, { Component} from 'react';\nimport {View, Dimensions, StyleSheet} from \"react-native\"\n\nimport Canvas from 'react-native-canvas';\nimport DrawCanvas from './components/DrawCanvas';\nimport Slider from '@react-native-community/slider';\nimport { generateStyle } from './styles/styles';\n\nvar device = Dimensions.get('window');\n\nconst styles = StyleSheet.create(generateStyle(device));\n\n export default class App extends Component {\n  state = {\n    imageData: 'data:image/png;base64,', // raw image data of the segmentation image\n    generatedImageData: 'data:image/png;base64,', // raw image data of the generated image\n    stylizedImageData: 'data:image/png;base64,', // raw image data of stylized generated image\n    displayedImageData: 'data:image/png;base64,', // raw image data of displayed image\n    style: 'none', // selected style\n    color: '#384f83', // pen color\n    thickness: 10, // stroke thickness\n  };\n\n  handleThickness = sliderValue => {\n    this.setState(prevState => ({\n      ...prevState,\n      thickness: sliderValue,\n    }));\n    console.log('thickness is now', sliderValue);\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n      <DrawCanvas thickness={this.state.thickness}/>\n      <Slider\n            style={{width: 200, height: 40}}\n            minimumValue={0}\n            maximumValue={device.width / 10}\n            minimumTrackTintColor=\"#000000\"\n            maximumTrackTintColor=\"#000000\"\n            onSlidingComplete={this.handleThickness}\n          />\n\n      </View>\n    )\n  }\n}","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}